// THIS FILE IS AUTOMATICALLY GENERATED
// DO NOT TOUCH!!!

#pragma once
#define MAX_STEP_SIZE 100000

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <assert.h>
#include "ejovo_rand.h"
#include <string.h>
#include <stdarg.h>
#include <complex.h>

#define MATRIX_SIZE(__MATRIX) __MATRIX->nrows * __MATRIX->ncols

#define FOREACH(MAT) for (size_t i = 0; i < MATRIX_SIZE(MAT); i++)
#define FORIJ(MAT, INIT_LOOP, INSIDE_LOOP, OUTSIDE_LOOP) \
    const size_t __m = MAT->nrows; \
    const size_t __n = MAT->ncols; \
        for (size_t i = 0; i < __m; i++) { \
        INIT_LOOP \
        for (size_t j = 0; j < __n; j++) {  \
            INSIDE_LOOP \
        } \
        OUTSIDE_LOOP\
    } \

extern const double PI;
extern const double TWO_PI;
extern const double HALF_PI;
extern const double EPS;
typedef struct Matrix_d {
    double *data;
    size_t nrows;
    size_t ncols;
} Matrix_d;
extern Matrix_d *g_ANON_d;
typedef struct {
    double *ptr;
    size_t ncols;
} ColIter_d;
typedef struct {
    double *ptr;
    size_t ptr_diff;
} RowIter_d;
typedef struct {
    double *ptr;
    size_t ptr_diff;
} MatIter_d;
typedef Matrix_d Vector_d;
typedef void (* EDITOR_d) (double *);
typedef void (* EDITOR_2_d) (double *, double *);
typedef void (* EDITOR_K_d) (double *, double);
typedef _Bool (* Mask_d) (double *);
typedef struct {
    Matrix_d *L;
    Matrix_d *U;
} LU_d;
typedef struct {
    Matrix_d *L;
    Matrix_d *U;
    Vector_d*P;
} LUP_d;
typedef struct {
    Matrix_d *L;
    Matrix_d *D;
    Vector_d*U;
} LDU_d;
typedef void (* MatIterFn_d) (MatIter_d);
typedef void (* MatIterFn_k_d) (MatIter_d, double);
typedef void (* MatIterFn_ptr_d) (MatIter_d, const double *);
typedef void (* MatIterFn_iter_d) (MatIter_d, MatIter_d);
typedef void (* MatIterFn_iter_k_d) (MatIter_d, MatIter_d, const double);
typedef void (* ColIterFn_d) (ColIter_d *);
typedef void (* ColIterFn_k_d) (ColIter_d*, double);
typedef void (* ColIterFn_ptr_d) (ColIter_d*, const double *);
typedef void (* ColIterFn_iter_d) (ColIter_d*, ColIter_d*);
typedef void (* RowIterFn_d) (RowIter_d*);
typedef void (* RowIterFn_k_d) (RowIter_d*, double);
typedef void (* RowIterFn_ptr_d) (RowIter_d*, const double *);
typedef void (* RowIterFn_iter_d) (RowIter_d*, RowIter_d*);
typedef void (* RowIterFn_iter_k_d) (RowIter_d*, RowIter_d*, const double);
typedef double (* function_d) (double);
typedef _Bool (* predicate_fn_d) (double);
typedef Matrix_d Index_d;
static inline Matrix_d *matalloc_d(size_t __nrows, size_t __ncols) {
    Matrix_d *x = (Matrix_d *) malloc(sizeof(Matrix_d));
    double *data = (double *) malloc(sizeof(double) * (__nrows * __ncols));
    x->data = data;
    x->nrows = __nrows;
    x->ncols = __ncols;
    return x;
}
Matrix_d *matvec_d(double k);
Matrix_d *matanon_d(int __count, ...);
static inline void matfree_d(Matrix_d *__A) {
    free(__A->data);
    free(__A);
}
static inline void Matrix_free_d(Matrix_d *__A) {
    if (__A) {
        if (__A->data) free(__A->data);
        free(__A);
    }
}
static inline void Matrix_reset_d(Matrix_d **__A_ptr) {
    if (*__A_ptr) {
        if ((*__A_ptr)->data) free((*__A_ptr)->data);
        free (*__A_ptr);
    }
    *__A_ptr = ((void *)0);
}
Matrix_d *Matrix_renew_d(Matrix_d *A, int m, int n);
static inline _Bool matcpy_d(Matrix_d *restrict __dest, const Matrix_d *restrict __src) {
    memcpy(__dest->data, __src->data, sizeof(double)*(__src->nrows * __src->ncols));
    __dest->ncols = __src->ncols;
    __dest->nrows = __src->nrows;
    if(__dest && __src && __dest->data) {
        return 1;
    } else {
        return 0;
    }
}
Matrix_d * matclone_d(const Matrix_d *restrict __src);
Matrix_d *Matrix_catch_d(Matrix_d **__lhs_ptr, Matrix_d *__anon_rhs);
Matrix_d *Matrix_anon_d(Matrix_d *__anon_rhs);
void Matrix_anon_free_d();
Matrix_d *Matrix_transpose_d(const Matrix_d *m);
Matrix_d *Matrix_shallow_copy_d(const Matrix_d *rhs);
Matrix_d *Matrix_take_d(Matrix_d *rhs);
Matrix_d * Matrix_new_d(int nrows, int ncols);
Matrix_d *Matrix_move_d(double **arr_ptr, size_t nrows, size_t ncols);
Matrix_d *Matrix_from_d(const double *arr, size_t nrows, size_t ncols);
Matrix_d *Matrix_colvec_d(const double *arr, size_t nrows);
Matrix_d *Matrix_rowvec_d(const double *arr, size_t ncols);
Matrix_d * Matrix_clone_d(const Matrix_d *restrict src);
Matrix_d * Matrix_ones_d(size_t nrows, size_t ncols);
Matrix_d * Matrix_ij_d(size_t nrows, size_t ncols);
 Vector_d*linspace_d(double start, double end, int N);
 Vector_d*range_d(int start, int end, int diff);
double raisedBy10_d(double input);
 Vector_d*logspace_d(double start, double end, int n);
 Vector_d*Vector_linspace_d(double start, double end, int N);
 Vector_d*Vector_range_d(double start, int end, int diff);
Matrix_d *Matrix_diagonal_d(size_t n);
Matrix_d *Matrix_tridiagonal_d(size_t n);
Matrix_d * Matrix_value_d(size_t nrows, size_t ncols, double value);
Matrix_d * Matrix_random_d(size_t nrows, size_t ncols, int min, int max);
Matrix_d * Matrix_rand_d(size_t nrows, size_t ncols);
Matrix_d * Matrix_identity_d(size_t n);
void matprint_d(const Matrix_d *m);
void Matrix_print_d(const Matrix_d *m);
void Vector_print_head_d(const Matrix_d *m, int n);
void Matrix_print_iter_d(const Matrix_d *m);
void Matrix_summary_d(const Matrix_d *m);
void Matrix_print_all_digits_d(const Matrix_d *m);
void Matrix_print_fixed_d(const Matrix_d *m);
Matrix_d *Matrix_id_d(size_t m, size_t n);
static inline void print_el_d(const double el) {
    printf("%4.4lf ", el);
}
static inline void print_el_end_d(const double el) {
    printf("%4.4lf}\n", el);
}
Matrix_d *Matrix_K_d(size_t __n);
Matrix_d *Matrix_C_d(size_t __n);
Matrix_d *Matrix_T_d(size_t __n);
Matrix_d *Matrix_B_d(size_t __n);
static inline void add_each_d(double *__a, double *__b) {
    (*__a) += (*__b);
}
static inline void sub_each_d(double *__a, double *__b) {
    (*__a) -= (*__b);
}
static inline void mult_each_d(double *__a, double *__b) {
    (*__a) *= (*__b);
}
static inline void div_each_d(double *__a, double *__b) {
    (*__a) /= (*__b);
}
static inline void multscalar_d(double *__el, double __k) {
    (*__el) *= __k;
}
static inline void addscalar_d(double *__el, double __k) {
    (*__el) += __k;
}
static inline void divscalar_d(double *__el, double __k) {
    (*__el) /= __k;
}
static inline void subscalar_d(double *__el, double __k) {
    (*__el) -= __k;
}
void Matrix_foreach_d(Matrix_d *__A, EDITOR_d __fnc);
void Matrix_foreach_2_d(Matrix_d *__A, const Matrix_d *__B, EDITOR_2_d __fnc);
void Matrix_foreach_k_d(Matrix_d *__A, EDITOR_K_d __fnc, double __k);
void matadd_foreach_d(Matrix_d *__A, const Matrix_d *__B);
void matsub_foreach_d(Matrix_d *__A, const Matrix_d *__B);
void matmult_foreach_d(Matrix_d *__A, const Matrix_d *__B);
void matdiv_foreach_d(Matrix_d *__A, const Matrix_d *__B);
void matmultscalar_d(Matrix_d *__A, const double __k);
void mataddscalar_d(Matrix_d *__A, const double __k);
void matdivscalar_d(Matrix_d *__A, const double __k);
void matsubscalar_d(Matrix_d *__A, const double __k);
double matsum_d(const Matrix_d *__A);
double matmin_d(const Matrix_d *__A);
double matmax_d(const Matrix_d *__A);
Matrix_d *Matrix_mult_scalar_d(const Matrix_d *__A, const double __k);
Matrix_d *Matrix_add_scalar_d(const Matrix_d *__A, const double __k);
Matrix_d *Matrix_sub_scalar_d(const Matrix_d *__A, const double __k);
Matrix_d *Matrix_div_scalar_d(const Matrix_d *__A, const double __k);
void Matrix_mask_d(Matrix_d *__A, Mask_d __mask, EDITOR_d __operator);
void Matrix_mask_2_d(Matrix_d *__A, Matrix_d *__B, Mask_d __mask, EDITOR_2_d __operator);
void Matrix_mask_k_d(Matrix_d *__A, Mask_d __mask, EDITOR_K_d __operator, const double __k);
static inline _Bool Matrix_valid_bounds_d(const Matrix_d *__m, size_t __i, size_t __j) {
    return (__i < __m->nrows && __j < __m->ncols);
}
_Bool matcmp_d(const Matrix_d *__A, const Matrix_d *__B);
_Bool matcmp_bytes_d(const Matrix_d *__A, const Matrix_d *__B);
_Bool Matrix_comp_add_d(const Matrix_d *__A, const Matrix_d *__B);
_Bool Matrix_comp_mult_d(const Matrix_d *__A, const Matrix_d *__B);
static inline size_t Matrix_size_d(const Matrix_d *__A) {
    return __A->nrows * __A->ncols;
}
_Bool Matrix_is_square_d(const Matrix_d *__A);
_Bool Matrix_is_row_d(const Matrix_d *__A);
_Bool Matrix_is_col_d(const Matrix_d *__A);
_Bool Matrix_is_vec_d(const Matrix_d *__A);
size_t Matrix_rect_limit_d(const Matrix_d *__A);
static inline Matrix_d *reshape_d(Matrix_d *__m, size_t __nrow, size_t __ncol) {
    __m->nrows = __nrow;
    __m->ncols = __ncol;
    return __m;
}
static inline double matget_d(const Matrix_d *__m, size_t __i) {
    return __m->data[__i];
}
static inline void matset_d(Matrix_d *__m, size_t __i, size_t __j, double __value) {
    __m->data[__i * __m->ncols + __j] = __value;
}
static inline double matat_d(const Matrix_d *__m, size_t __i, size_t __j) {
    return __m->data[__i * __m->ncols + __j];
}
static inline double *matacc_d(const Matrix_d *__m, size_t __i, size_t __j) {
    return __m->data + (__i * __m->ncols + __j);
}
static inline void setelement_d(double *__el, const double __value) {
    *__el = __value;
}
static inline void matswap_d(double *__a, double *__b) {
    double temp = *__a;
    *(__a) = *(__b);
    *(__b) = temp;
}
static inline double Matrix_first_d(const Matrix_d *__m) {
    return matat_d(__m, 0, 0);
}
static inline double Matrix_last_d(const Matrix_d *__m) {
    return matat_d(__m, __m->nrows - 1, __m->ncols - 1);
}
static inline MatIter_d Matrix_begin_d(const Matrix_d *__m) {
    MatIter_d b = {.ptr = __m->data, .ptr_diff = 1};
    return b;
}
static inline MatIter_d Matrix_end_d(const Matrix_d *__m) {
    MatIter_d e = {.ptr = matacc_d(__m, __m->nrows - 1, __m->ncols), .ptr_diff = 1};
    return e;
}
static inline int Matrix_set_d(Matrix_d * __m, size_t __i, size_t __j, double __value) {
    if (Matrix_valid_bounds_d(__m, __i, __j)) {
        __m->data[__i*__m->ncols + __j] = __value;
        return 0;
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (set)\n");
        return 1;
    }
}
static inline double *matacc_check_d(const Matrix_d *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_d(__m, __i, __j)) {
        return __m->data + (__i*__m->ncols + __j);
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (access)\n");
        return ((void *)0);
    }
}
static inline double *Matrix_access_d(const Matrix_d * __m, size_t __i, size_t __j) {
    return matacc_check_d(__m, __i, __j);
}
static inline double Matrix_at_d(const Matrix_d *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_d(__m, __i, __j)) {
        return __m->data[__i * __m->ncols + __j];
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (at)\n");
        return -1;
    }
}
static inline void matcpyele_unsafe_d(Matrix_d *__dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_d *__src) {
    for (size_t i = __istart, irow = 0; i <= __iend; i++, irow++) {
        for (size_t j = __jstart, jcol = 0; j <= __jend; j++, jcol++) {
            Matrix_set_d(__dest, i, j, Matrix_at_d(__src, irow, jcol));
        }
    }
}
static inline int matcpyele_d(Matrix_d * __dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_d * __src) {
    if (__iend < __istart || __jend < __jstart || __iend >= __dest->nrows || __jend >= __dest->ncols) {
        perror("Selected submatrix is not contained within Parent Matrix\n");
        return -1;
    }
    if (__src->nrows != (__iend - __istart + 1) || __src->ncols != (__jend - __jstart + 1)) {
        perror("Selected submatrix not the same size as the src matrix to copy\n");
        return -2;
    }
    matcpyele_unsafe_d(__dest, __istart, __iend, __jstart, __jend, __src);
    return 0;
}
static inline void matsetrow_d(Matrix_d *__A, size_t __i, size_t __j, const double *__src, size_t __n) {
    double *row_start = matacc_d(__A, __i, __j);
    memcpy((void *) row_start, (void *) __src, sizeof(double) * __n);
}
static inline void matsetcol_d(Matrix_d *__A, size_t __i, size_t __j, const double *__src, size_t __n) {
    double *col_start = matacc_d(__A, __i, __j);
    for (size_t i = 0; i < __n; i++) {
        *(col_start + (__A->nrows * i)) = __src[i];
    }
}
void matsetrow_mult_k_d(MatIter_d __r, const MatIter_d __row_end, double __k);
void matsetrow_div_k_d(MatIter_d __r, const MatIter_d __row_end, double __k);
void matsetrow_add_k_d(MatIter_d __r, const MatIter_d __row_end, double __k);
void matsetrow_sub_k_d(MatIter_d __r, const MatIter_d __row_end, double __k);
int Matrix_mult_row_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_div_row_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_add_row_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_sub_row_k_d(Matrix_d *__A, const size_t __i, const double __k);
void matsetcol_mult_k_d(MatIter_d __c, const MatIter_d __col_end, double __k);
void matsetcol_div_k_d(MatIter_d __c, const MatIter_d __col_end, double __k);
void matsetcol_add_k_d(MatIter_d __c, const MatIter_d __col_end, double __k);
void matsetcol_sub_k_d(MatIter_d __c, const MatIter_d __col_end, double __k);
int Matrix_mult_col_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_div_col_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_add_col_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_sub_col_k_d(Matrix_d *__A, const size_t __i, const double __k);
int Matrix_set_row_d(Matrix_d *__A, size_t __i, const Matrix_d *__cow);
int Matrix_set_col_d(Matrix_d *__A, size_t __j, const Matrix_d *__col);
Matrix_d *Matrix_get_col_d(const Matrix_d *__A, size_t __j);
Matrix_d *Matrix_get_row_d(const Matrix_d *__A, size_t __i);
Matrix_d * submat_d(const Matrix_d * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_d * Matrix_submat_d(const Matrix_d * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_d * Matrix_minor_d(const Matrix_d * __A, size_t __irow, size_t __icol);
void matfill_d(Matrix_d *__A, const double __value);
void Matrix_fill_d(Matrix_d * __A, const double value);
void Matrix_fill_mask_d(Matrix_d *__A, Mask_d __mask, const double __value);
Matrix_d *Matrix_rcat_d(const Matrix_d *__A, const Matrix_d *__B);
Matrix_d *Matrix_ccat_d(const Matrix_d *__A, const Matrix_d *__B);
MatIter_d matdiagbegin_d(const Matrix_d *__m, const int __d);
MatIter_d matdiagend_d(const Matrix_d *__m, const int __d);
void MatIter_print_d(const MatIter_d __begin, const MatIter_d __end);
double Iter_dot_d(const MatIter_d __r, const MatIter_d __rend, const MatIter_d __c);
void Matrix_print_row_d(const Matrix_d *__A, size_t __i);
void Matrix_print_col_d(const Matrix_d *__A, size_t __j);
void Matrix_print_diag_d(const Matrix_d *__A, size_t __d);
void matrowop_add_d(Matrix_d *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void matrowop_add_scaled_d(Matrix_d *__A, const size_t __r1, const size_t __r2, const double __k, const size_t __col_offset);
void Matrix_rowop_add_d(Matrix_d *__A, const size_t __r1, const size_t __r2);
void Matrix_rowop_add_offset_d(Matrix_d *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void Matrix_rowop_add_scaled_d(Matrix_d *__A, const size_t __r1, const size_t __r2, const double __k);
double Matrix_row_min_d(const Matrix_d *__A, const size_t __i);
double Matrix_row_max_d(const Matrix_d *__A, const size_t __i);
double Matrix_col_min_d(const Matrix_d *__A, const size_t __j);
double Matrix_col_max_d(const Matrix_d *__A, const size_t __j);
double Matrix_diag_min_d(const Matrix_d *__A, const size_t __j);
double Matrix_diag_max_d(const Matrix_d *__A, const size_t __j);
double Matrix_row_prod_d(const Matrix_d *__A, const size_t __i);
double Matrix_col_prod_d(const Matrix_d *__A, const size_t __i);
double Matrix_diag_prod_d(const Matrix_d *__A, const size_t __i);
double Matrix_row_sum_d(const Matrix_d *__A, const size_t __i);
double Matrix_col_sum_d(const Matrix_d *__A, const size_t __i);
double Matrix_diag_sum_d(const Matrix_d *__A, const size_t __i);
MatIter_d matcolpos_d(const Matrix_d *__A, size_t __i, size_t __j);
MatIter_d Matrix_col_end_d(const Matrix_d *__A, size_t __j);
MatIter_d Matrix_col_begin_d(const Matrix_d *__A, size_t __j);
MatIter_d matcolbegin_d(const Matrix_d *__A, size_t __i);
MatIter_d matcolend_d(const Matrix_d *__A, size_t __i);
MatIter_d matrowpos_d(const Matrix_d *__A, size_t __i, size_t __j);
MatIter_d matrowbegin_d(const Matrix_d *__A, size_t __i);
MatIter_d matrowend_d(const Matrix_d *__A, size_t __i);
MatIter_d Matrix_row_end_d(const Matrix_d *__A, size_t __i);
MatIter_d Matrix_row_begin_d(const Matrix_d *__A, size_t __i);
static inline MatIter_d MatIter_new_d(double *__ptr, size_t __ptr_diff) {
    MatIter_d c = {.ptr = __ptr, .ptr_diff = __ptr_diff};
    return c;
}
static inline MatIter_d MatIter_null_d() {
    MatIter_d null = {.ptr = ((void *)0), .ptr_diff = 0};
    return null;
}
static inline _Bool MatIter_is_null_d(MatIter_d __i) {
    return __i.ptr == ((void *)0);
}
static inline MatIter_d MatIter_next_d(MatIter_d __c) {
    MatIter_d next = {.ptr = __c.ptr += __c.ptr_diff, .ptr_diff = __c.ptr_diff};
    return next;
}
static inline _Bool MatIter_cmp_d(const MatIter_d __lhs, const MatIter_d __rhs) {
    return __lhs.ptr == __rhs.ptr;
}
static inline double MatIter_value_d(const MatIter_d __c) {
    return *(__c.ptr);
}
static inline size_t MatIter_length_d(const MatIter_d begin, const MatIter_d end) {
    size_t diff = end.ptr - begin.ptr;
    return diff / begin.ptr_diff;
}
double MatIter_sum_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_prod_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_max_d(MatIter_d __a, const MatIter_d __b);
double MatIter_min_d(MatIter_d __a, const MatIter_d __b);
void MatIter_set_d(MatIter_d __r, const double __k);
void MatIter_add_k_d(MatIter_d __r, const double __k);
void MatIter_sub_k_d(MatIter_d __r, const double __k);
void MatIter_mult_k_d(MatIter_d __r, const double __k);
void MatIter_div_k_d(MatIter_d __r, const double __k);
void MatIter_set_ptr_d(MatIter_d __r, const double *__ptr);
void MatIter_add_ptr_d(MatIter_d __r, const double *__ptr);
void MatIter_sub_ptr_d(MatIter_d __r, const double *__ptr);
void MatIter_mult_ptr_d(MatIter_d __r, const double *__ptr);
void MatIter_div_ptr_d(MatIter_d __r, const double *__ptr);
void MatIter_set_iter_d(MatIter_d __a, const MatIter_d __b);
void MatIter_set_iter_pow_d(MatIter_d __a, const MatIter_d __b, double __n);
void MatIter_add_iter_d(MatIter_d __a, const MatIter_d __b);
void MatIter_add_iter_scaled_d(MatIter_d __a, const MatIter_d __b, const double __k);
void MatIter_sub_iter_d(MatIter_d __a, const MatIter_d __b);
void MatIter_mult_iter_d(MatIter_d __a, const MatIter_d __b);
void MatIter_div_iter_d(MatIter_d __a, const MatIter_d __b);
void MatIter_row_set_k_d(const MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_row_set_iter_d(const MatIter_d __rbegin, const MatIter_d __rend, const MatIter_d __bbegin);
void MatIter_row_add_k_d(const MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_row_sub_k_d(const MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_row_mult_k_d(const MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_row_div_k_d(const MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_row_add_row_d(const MatIter_d __abegin, const MatIter_d __aend, const MatIter_d __bbegin);
void MatIter_apply_d(const MatIter_d __rbegin, const MatIter_d __rend, MatIterFn_d __fn);
void MatIter_apply_k_d(const MatIter_d __rbegin, const MatIter_d __rend, const double __k, MatIterFn_k_d __fn_k);
void MatIter_apply_ptr_d(const MatIter_d __rbegin, const MatIter_d __rend, const double *__ptr, MatIterFn_ptr_d __fn_ptr);
void MatIter_apply_iter_d(const MatIter_d __abegin, const MatIter_d __aend, const MatIter_d __bbegin, MatIterFn_iter_d __fn_iter);
void MatIter_apply_iter_scaled_d(const MatIter_d __abegin, const MatIter_d __aend, const MatIter_d __bbegin, const double __k, MatIterFn_iter_k_d __fn_iter_k);
void MatIter_apply_set_k_d(MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_apply_add_k_d(MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_apply_sub_k_d(MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_apply_mult_k_d(MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_apply_div_k_d(MatIter_d __rbegin, const MatIter_d __rend, const double __k);
void MatIter_apply_set_ptr_d(MatIter_d __rbegin, const MatIter_d __rend, const double *__ptr);
void MatIter_apply_add_ptr_d(MatIter_d __rbegin, const MatIter_d __rend, const double *__ptr);
void MatIter_apply_sub_ptr_d(MatIter_d __rbegin, const MatIter_d __rend, const double *__ptr);
void MatIter_apply_mult_ptr_d(MatIter_d __rbegin, const MatIter_d __rend, const double *__ptr);
void MatIter_apply_div_ptr_d(MatIter_d __rbegin, const MatIter_d __rend, const double *__ptr);
void MatIter_apply_set_iter_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin);
void MatIter_apply_set_iter_pow_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin, double __n);
void MatIter_apply_add_iter_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin);
void MatIter_apply_sub_iter_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin);
void MatIter_apply_mult_iter_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin);
void MatIter_apply_div_iter_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin);
void MatIter_apply_add_iter_scaled_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin, const double __k);
Matrix_d *Matrix_set_col_iter_d(Matrix_d *__m, size_t __j, MatIter_d __source);
Matrix_d *Matrix_set_row_iter_d(Matrix_d *__m, size_t __i, MatIter_d __source);
MatIter_d Matrix_row_begin_from_col_d(const Matrix_d *__A, size_t __i, size_t __j);
MatIter_d Matrix_col_begin_from_row_d(const Matrix_d *__A, size_t __j, size_t __i);
MatIter_d Matrix_diag_end_d(const Matrix_d *__m, const int __d);
MatIter_d Matrix_diag_begin_d(const Matrix_d *__m, const int __d);
 Vector_d*MatIter_difference_d(MatIter_d __abegin, const MatIter_d __aend, MatIter_d __bbegin);
Matrix_d *Matrix_pow_d(Matrix_d * __A, size_t __power);
double Matrix_det_d(const Matrix_d * __A);
double matcdr_check_d(const Matrix_d *__A, const Matrix_d *__B, size_t __irow, size_t __icol);
static inline double matcdr_d(const Matrix_d *__A, const Matrix_d *__B, size_t __irow, size_t __icol) {
        double inner_product = 0;
        for (size_t i = 0; i < __A->ncols; i++) {
            inner_product += (matat_d(__A, __irow, i) * matat_d(__B, i, __icol));
        }
        return inner_product;
}
static inline Matrix_d *matmul_d(const Matrix_d *__A, const Matrix_d *__B) {
    Matrix_d *product = Matrix_new_d(__A->nrows, __B->ncols);
    if (product){
        for (size_t i = 0; i < __A->nrows; i++) {
            for (size_t j = 0; j < __B->ncols; j++) {
                matset_d(product, i, j, matcdr_d(__A, __B, i, j));
            }
        }
    }
    return product;
}
Matrix_d * Matrix_multiply_d(const Matrix_d *__A, const Matrix_d *__B);
void matadd_d(Matrix_d *__A, const Matrix_d *__B);
Matrix_d *Matrix_add_d(const Matrix_d *__A, const Matrix_d *__B);
void mathad_d(Matrix_d *__A, const Matrix_d *__B);
void mathad_check_d(Matrix_d *__A, const Matrix_d *__B);
void mathadexp_d(Matrix_d *__A, int __k);
Matrix_d *Matrix_hadamard_d(const Matrix_d *__A, const Matrix_d *__B);
void matsub_d(Matrix_d *__A, const Matrix_d *__B);
Matrix_d *Matrix_subtract_d(const Matrix_d *__A, const Matrix_d *__B);
double colnorm_d(const MatIter_d __begin, const MatIter_d __end);
double Matrix_col_norm_d(const Matrix_d *__A, size_t __j);
void matnormcol_d(const MatIter_d __begin, const MatIter_d __end);
void matnormcols_d(Matrix_d *__A);
void Matrix_normalize_col_d(Matrix_d *__A, size_t __j);
void Matrix_normalize_cols_d(Matrix_d *__A);
double Matrix_frobenius_d(const Matrix_d *__A);
Matrix_d *matlu_nopivot_d(Matrix_d *__A);
LU_d Matrix_lu_d(const Matrix_d *__A);
Matrix_d *Matrix_solve_lu_d(const Matrix_d *__A, const Vector_d*__b);
Matrix_d *gausselim_d(const Matrix_d *__A, const Matrix_d *__B);
Matrix_d *Matrix_inverse_d(const Matrix_d *__A);
 Vector_d*jacobi_iteration_d(const Matrix_d *__A, const Vector_d*__b, const Vector_d*__x0, double __crit);
Matrix_d *Matrix_vandermonde_d(const Vector_d*__v);
Matrix_d *Matrix_vandermonde_reduced_d(const Vector_d*__v, size_t __degree);
void Row_switch_d(Index_d *__ind, size_t __r1, size_t __r2);
void Row_multiply_d(Matrix_d *__m, Index_d *__ind, size_t __r, double __k);
void Row_addition_d(Matrix_d *__m, Index_d *__ind, size_t __r1, size_t __r2);
void Row_addition_k_d(Matrix_d *__m, Index_d *__ind, size_t __r1, size_t __r2, double __k);
 Vector_d*vector_d(int __count, ...);
 Vector_d*Vector_new_d(size_t __nrows);
 Vector_d*Vector_ones_d(size_t __nrows);
 Vector_d*Vector_from_iter_d(MatIter_d __begin, MatIter_d __end);
 Vector_d*Vector_rand_d(size_t __nrows);
 Vector_d*Vector_random_d(size_t __nrows, int __min, int __max);
 Vector_d*Vector_from_d(const double* __arr, size_t __nrows);
 Vector_d*Vector_clone_d(const Vector_d*__v);
 Vector_d*Vector_from_matrix_d(const Matrix_d *__m);
 Vector_d*Vector_as_col_d(const Vector_d*__v);
 Vector_d*Vector_as_row_d(const Vector_d*__v);
void Vector_free_d( Vector_d*__v);
void Vector_reset_d( Vector_d**__v);
 Vector_d*Matrix_as_col_d(const Matrix_d *__m);
 Vector_d*Matrix_as_row_d(const Matrix_d *__m);
size_t Vector_size_d(const Vector_d*__v);
void Vector_set_d( Vector_d*__v, size_t __pos, double __val);
void Vector_set_first_d( Vector_d*__v, double __val);
void Vector_set_last_d( Vector_d*__v, double __val);
double Vector_first_d(const Vector_d*__v);
double Vector_last_d(const Vector_d*__v);
MatIter_d Vector_begin_d(const Vector_d*__v);
MatIter_d Vector_end_d(const Vector_d*__v);
MatIter_d Vector_iter_d(const Vector_d*__v, size_t i);
double Vector_max_d(const Vector_d*__v);
double Vector_at_d(const Vector_d*__v, size_t __i);
static inline double vecat_d(const Vector_d*__v, size_t i) {
    return __v->data[i];
}
static inline double *vecacc_d(const Vector_d*__v, size_t i) {
    return &__v->data[i];
}
static inline void vecset_d(const Vector_d*__v, size_t i, double k) {
    __v->data[i] = k;
}
static inline double *vecptr_d(const Vector_d*__v, size_t i) {
    return &__v->data[i];
}
double *Vector_access_d(const Vector_d*__v, size_t __i);
 Vector_d*Vector_map_d(const Vector_d*__v, function_d __fn);
double Vector_sum_d(const Vector_d*__v);
void Vector_print_as_row_d(const Vector_d*__v);
double vecdot_d(const Vector_d*__u, const Vector_d*__v);
double Vector_inner_d(const Vector_d*__u, const Vector_d*__v);
 Vector_d*vecproject_d(const Vector_d*__v, const Vector_d*__u);
 Vector_d*Vector_project_onto_d(const Vector_d*__v, const Vector_d*__u);
double Vector_dot_d(const Vector_d*__u, const Vector_d*__v);
 Vector_d*Vector_hadamard_d(const Vector_d*__u, const Vector_d*__v);
Matrix_d *Vector_outer_d(const Vector_d*__u, const Vector_d*__v);
Matrix_d *Vector_orthogonal_projection_d(const Vector_d*__v);
double vecpnorm_d(const Vector_d*__u, const int __p);
static inline double vecnorm_d(const Vector_d*__A) {
    double sum = 0;
    const size_t n = Matrix_size_d(__A);
    for (size_t i = 0; i < n; i++) {
        sum += __A->data[i] * __A->data[i];
    }
    return sqrt(sum);
}
void vecnormalize_d( Vector_d*__u);
double Vector_norm_d(const Vector_d*__u);
double Vector_pnorm_d(const Vector_d*__u, const size_t __p);
 Vector_d*Vector_normalize_d(const Vector_d*__u);
 Vector_d*ascol_d( Vector_d*__v);
 Vector_d*asrow_d( Vector_d*__v);
double Vector_distance_d(const Vector_d*__v, const Vector_d*__u);
 Vector_d*Vector_difference_d(const Vector_d*__v, const Vector_d*__u);
static inline double log_d(double x) {
    return log(x);
}
double MatIter_mean_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_sum_squared_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_mean_squared_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_rms_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_var_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_std_d(const MatIter_d __begin, const MatIter_d __end);
double MatIter_sumabs_d(const MatIter_d __begin, const MatIter_d __end);
double Vector_iter_sum_d(const Vector_d*__v);
double Vector_iter_prod_d(const Vector_d*__v);
double Vector_iter_mean_d(const Vector_d*__v);
double Vector_iter_mean_squared_d(const Vector_d*__v);
double Vector_iter_rms_d(const Vector_d*__v);
double Vector_iter_min_d(const Vector_d*__v);
double Vector_iter_max_d(const Vector_d*__v);
double Vector_iter_var_d(const Vector_d*__v);
double Vector_iter_std_d(const Vector_d*__v);
double Matrix_iter_sum_d(const Matrix_d *__m);
double Matrix_iter_prod_d(const Matrix_d *__m);
double Matrix_iter_mean_d(const Matrix_d *__m);
double Matrix_iter_mean_squared_d(const Matrix_d *__m);
double Matrix_iter_rms_d(const Matrix_d *__m);
double Matrix_iter_min_d(const Matrix_d *__m);
double Matrix_iter_max_d(const Matrix_d *__m);
double Matrix_iter_var_d(const Matrix_d *__m);
double Matrix_iter_std_d(const Matrix_d *__m);
typedef double (* mat_iter_fn_d) (const MatIter_d, const MatIter_d);
double Matrix_iterate_d(const Matrix_d *__m, mat_iter_fn_d fn);
double mean_d(const Matrix_d *__m);
double sum_d(const Matrix_d *__m);
double std_d(const Matrix_d *__m);
double var_d(const Matrix_d *__m);
double min_d(const Matrix_d *__m);
double max_d(const Matrix_d *__m);
double maxabs_d(const Matrix_d *__m);
double sumabs_d(const Matrix_d *__m);
double rms_d(const Matrix_d *__m);
double mean_squared_d(const Matrix_d *__m);
double cov_d(const Matrix_d *__x, const Matrix_d *__y);
double prod_d(const Matrix_d *__m);
double cor_d(const Matrix_d *__x, const Matrix_d *__y);
double cmoment_d(const Vector_d*__v, int __k);
double rmoment_d(const Vector_d*__v, int __k);
 Vector_d*linear_regression_d(const Vector_d*__x, const Vector_d*__y);
static inline double ejovo_log_d (const double x) {
    return log(x);
}
static inline double ejovo_fabs_d (const double x) {
    return fabs((double) x);
}
 Vector_d*loglog_regression_d(const Vector_d*__x, const Vector_d*__y);
 Vector_d*least_squares_d(const Vector_d*__x, const Vector_d*__y, int degree);
Matrix_d *runif_d(int n, double a, double b);
Matrix_d *rnorm_d(int n, double mu, double sigma);
Matrix_d *rnorm_rng_d(int n, double mu, double sigma, RNG_FN rng_fn);
Matrix_d *runif_rng_d(int n, double a, double b, RNG_FN rng_fn);
Vector_d *Vector_runif_d(size_t __n, double __a, double __b);
Vector_d *Vector_rnorm_d(size_t __n, double __mean, double __std);
Vector_d *Vector_rexp_d(size_t __n, double __rate);
double Id_d(double x);
double x_squared_d(double x);
double x_cubed_d(double x);
 Vector_d*filter_d(const Vector_d*__v, predicate_fn_d __pred);
 Vector_d*filter_if_not_d(const Vector_d*__v, predicate_fn_d __pred);
 Vector_d*filter_lt_d(const Vector_d*__v, double __cutoff);
 Vector_d*filter_lteq_d(const Vector_d*__v, double __cutoff);
 Vector_d*filter_gt_d(const Vector_d*__v, double __cutoff);
 Vector_d*filter_gteq_d(const Vector_d*__v, double __cutoff);
Matrix_d *map_d(const Matrix_d *__m, function_d fn);
Matrix_d *apply_d(Matrix_d *__m, function_d fn);
double head_d(const Matrix_d *__m);
Matrix_d *take_d(const Matrix_d *__m, int n_el);
 Vector_d*tail_d(const Matrix_d *__m);
double last_d(const Matrix_d *__m);
 Vector_d*init_d(const Matrix_d *__m);
extern double TRUE_d;
extern double FALSE_d;
typedef Matrix_d Logical_d;
typedef double (* pred_fn_d) (double);
double true_fn_d(double d);
double NOT_d(double d);
double AND_d(double a, double b);
double OR_d(double a, double b);
_Bool Matrix_is_logical_d(const Matrix_d *__log);
_Bool Vector_is_logical_d(const Vector_d*__log);
int Matrix_mask_count_d(const Matrix_d *__mask);
int Vector_mask_count_d(const Vector_d*__mask);
Matrix_d *Matrix_as_logical_d(const Matrix_d *__m, pred_fn_d __fn);
Matrix_d *Matrix_as_true_d(const Matrix_d *__m);
Logical_d *Matrix_lt_d(const Matrix_d *__m, double __k);
Logical_d *Matrix_lteq_d(const Matrix_d *__m, double __k);
Logical_d *Matrix_gt_d(const Matrix_d *__m, double __k);
Logical_d *Matrix_gteq_d(const Matrix_d *__m, double __k);
void matsetmask_d(Matrix_d *__m, const Matrix_d *__mask, double __val);
void matsetpred_d(Matrix_d *__m, pred_fn_d __predicate, double __val);
 Vector_d*Matrix_filter_mask_d(const Matrix_d *__m, const Matrix_d *__mask);
_Bool Logical_all_d(const Matrix_d *__mask);
_Bool Logical_any_d(const Matrix_d *__mask);
Logical_d *Logical_not_d(const Matrix_d *__mask);
Matrix_d *Matrix_as_index_d(const Matrix_d *__m);
 Vector_d*Matrix_scrub_index_d(const Matrix_d *__m, const Index_d *__ind);
 Vector_d*matindex_d(const Matrix_d *__m, const Index_d *__ind);
 Vector_d*Matrix_index_d(const Matrix_d *__m, const Index_d *__ind);
 Vector_d*Matrix_logical_index_d(const Matrix_d *__m, const Logical_d *__log);
Index_d *Matrix_where_d(const Matrix_d *__m, pred_fn_d __fn);
static inline Index_d *Logical_get_index_d(const Logical_d *__log) {
    Index_d *ind = Vector_new_d(Vector_mask_count_d(__log));
    MatIter_d it = Matrix_begin_d(ind);
    for (size_t i = 0; i < Matrix_size_d(__log); i++) {
        if (matget_d(__log, i) == TRUE_d) {
            MatIter_set_d(it, i);
            it = MatIter_next_d(it);
        }
    }
    return ind;
}
Index_d *Matrix_where_lt_d(const Matrix_d *__m, double __k);
Index_d *Matrix_where_lteq_d(const Matrix_d *__m, double __k);
Index_d *Matrix_where_gt_d(const Matrix_d *__m, double __k);
Index_d *Matrix_where_gteq_d(const Matrix_d *__m, double __k);
Matrix_d *matsetind_d(Matrix_d *__m, const Matrix_d *__ind, const Matrix_d *__val);
Matrix_d *Matrix_set_index_d(const Matrix_d *__m, const Matrix_d *__ind, const Matrix_d *__val);
Matrix_d *Matrix_extract_rows_d(const Matrix_d *__m, Index_d *__ind);
Matrix_d *Matrix_extract_cols_d(const Matrix_d *__m, Index_d *__ind);
 Vector_d*Matrix_scrub_col_index_d(const Matrix_d *__m, const Index_d *__ind);
 Vector_d*Matrix_scrub_row_index_d(const Matrix_d *__m, const Index_d *__ind);
static inline _Bool is_int_d(double x) {
    return x == floor(x);
}
static inline _Bool are_col_indices_valid_d(const Matrix_d *__m, const Index_d *__ind) {
    MatIter_d it = Matrix_begin_d(__ind);
    const MatIter_d end = Matrix_begin_d(__ind);
    for(; !MatIter_cmp_d(it, end); it = MatIter_next_d(it)) {
        double val = MatIter_value_d(it);
        if (val < 0 || !is_int_d(val) || val >= __m->ncols) return 0;
    }
    return 1;
}
static inline _Bool are_row_indices_valid_d(const Matrix_d *__m, const Index_d *__ind) {
    MatIter_d it = Matrix_begin_d(__ind);
    const MatIter_d end = Matrix_begin_d(__ind);
    for(; !MatIter_cmp_d(it, end); it = MatIter_next_d(it)) {
        double val = MatIter_value_d(it);
        if (val < 0 || !is_int_d(val) || val >= __m->nrows) return 0;
    }
    return 1;
}
int MatIter_max_index_d(MatIter_d begin, const MatIter_d end);
int MatIter_min_index_d(MatIter_d begin, const MatIter_d end);
int Matrix_row_min_index_d(const Matrix_d *__m, size_t __i);
int Matrix_row_max_index_d(const Matrix_d *__m, size_t __i);
int Matrix_col_min_index_d(const Matrix_d *__m, size_t __i);
int Matrix_col_max_index_d(const Matrix_d *__m, size_t __i);
int Matrix_col_max_index_from_row_d(const Matrix_d *__m, size_t __j, size_t __i);
int Matrix_col_min_index_from_row_d(const Matrix_d *__m, size_t __j, size_t __i);
int Matrix_row_max_index_from_col_d(const Matrix_d *__m, size_t __i, size_t __j);
int Matrix_row_min_index_from_col_d(const Matrix_d *__m, size_t __i, size_t __j);
Matrix_d *Matrix_runif_d(size_t __m, size_t __n, double __a, double __b);
Matrix_d *Matrix_rnorm_d(size_t __m, size_t __n, double __mean, double __std);
Matrix_d *as_stochastic_d(Matrix_d *__m);
Matrix_d *as_row_stochastic_d(Matrix_d *__m);
Matrix_d *as_col_stochastic_d(Matrix_d *__m);
Matrix_d *as_doubly_stochastic_d(Matrix_d *__m);
Matrix_d *as_doubly_stochastic_DEPRECATED_d(Matrix_d *__m);
Matrix_d *Matrix_rexp_d(size_t __m, size_t __n, double __rate);
Matrix_d *Matrix_as_stochastic_d(const Matrix_d *__m);
Matrix_d *Stochastic_runif_d(size_t __n, double __a, double __b);
Matrix_d *Stochastic_rnorm_d(size_t __n, double __mean, double __std);
Matrix_d *Stochastic_rexp_d(size_t __n, double __rate);
 Vector_d*Vector_prob_unif_d(size_t __n);
 Vector_d*compute_row_sums_d(const Matrix_d *__m);
 Vector_d*compute_col_sums_d(const Matrix_d *__m);
extern const double PI;
extern const double TWO_PI;
extern const double HALF_PI;
extern const double EPS;
typedef struct Matrix_f {
    float *data;
    size_t nrows;
    size_t ncols;
} Matrix_f;
extern Matrix_f *g_ANON_f;
typedef struct {
    float *ptr;
    size_t ncols;
} ColIter_f;
typedef struct {
    float *ptr;
    size_t ptr_diff;
} RowIter_f;
typedef struct {
    float *ptr;
    size_t ptr_diff;
} MatIter_f;
typedef Matrix_f Vector_f;
typedef void (* EDITOR_f) (float *);
typedef void (* EDITOR_2_f) (float *, float *);
typedef void (* EDITOR_K_f) (float *, float);
typedef _Bool (* Mask_f) (float *);
typedef struct {
    Matrix_f *L;
    Matrix_f *U;
} LU_f;
typedef struct {
    Matrix_f *L;
    Matrix_f *U;
    Vector_f*P;
} LUP_f;
typedef struct {
    Matrix_f *L;
    Matrix_f *D;
    Vector_f*U;
} LDU_f;
typedef void (* MatIterFn_f) (MatIter_f);
typedef void (* MatIterFn_k_f) (MatIter_f, float);
typedef void (* MatIterFn_ptr_f) (MatIter_f, const float *);
typedef void (* MatIterFn_iter_f) (MatIter_f, MatIter_f);
typedef void (* MatIterFn_iter_k_f) (MatIter_f, MatIter_f, const float);
typedef void (* ColIterFn_f) (ColIter_f *);
typedef void (* ColIterFn_k_f) (ColIter_f*, float);
typedef void (* ColIterFn_ptr_f) (ColIter_f*, const float *);
typedef void (* ColIterFn_iter_f) (ColIter_f*, ColIter_f*);
typedef void (* RowIterFn_f) (RowIter_f*);
typedef void (* RowIterFn_k_f) (RowIter_f*, float);
typedef void (* RowIterFn_ptr_f) (RowIter_f*, const float *);
typedef void (* RowIterFn_iter_f) (RowIter_f*, RowIter_f*);
typedef void (* RowIterFn_iter_k_f) (RowIter_f*, RowIter_f*, const float);
typedef float (* function_f) (float);
typedef _Bool (* predicate_fn_f) (float);
typedef Matrix_f Index_f;
static inline Matrix_f *matalloc_f(size_t __nrows, size_t __ncols) {
    Matrix_f *x = (Matrix_f *) malloc(sizeof(Matrix_f));
    float *data = (float *) malloc(sizeof(float) * (__nrows * __ncols));
    x->data = data;
    x->nrows = __nrows;
    x->ncols = __ncols;
    return x;
}
Matrix_f *matvec_f(double k);
Matrix_f *matanon_f(int __count, ...);
static inline void matfree_f(Matrix_f *__A) {
    free(__A->data);
    free(__A);
}
static inline void Matrix_free_f(Matrix_f *__A) {
    if (__A) {
        if (__A->data) free(__A->data);
        free(__A);
    }
}
static inline void Matrix_reset_f(Matrix_f **__A_ptr) {
    if (*__A_ptr) {
        if ((*__A_ptr)->data) free((*__A_ptr)->data);
        free (*__A_ptr);
    }
    *__A_ptr = ((void *)0);
}
Matrix_f *Matrix_renew_f(Matrix_f *A, int m, int n);
static inline _Bool matcpy_f(Matrix_f *restrict __dest, const Matrix_f *restrict __src) {
    memcpy(__dest->data, __src->data, sizeof(float)*(__src->nrows * __src->ncols));
    __dest->ncols = __src->ncols;
    __dest->nrows = __src->nrows;
    if(__dest && __src && __dest->data) {
        return 1;
    } else {
        return 0;
    }
}
Matrix_f * matclone_f(const Matrix_f *restrict __src);
Matrix_f *Matrix_catch_f(Matrix_f **__lhs_ptr, Matrix_f *__anon_rhs);
Matrix_f *Matrix_anon_f(Matrix_f *__anon_rhs);
void Matrix_anon_free_f();
Matrix_f *Matrix_transpose_f(const Matrix_f *m);
Matrix_f *Matrix_shallow_copy_f(const Matrix_f *rhs);
Matrix_f *Matrix_take_f(Matrix_f *rhs);
Matrix_f * Matrix_new_f(int nrows, int ncols);
Matrix_f *Matrix_move_f(float **arr_ptr, size_t nrows, size_t ncols);
Matrix_f *Matrix_from_f(const float *arr, size_t nrows, size_t ncols);
Matrix_f *Matrix_colvec_f(const float *arr, size_t nrows);
Matrix_f *Matrix_rowvec_f(const float *arr, size_t ncols);
Matrix_f * Matrix_clone_f(const Matrix_f *restrict src);
Matrix_f * Matrix_ones_f(size_t nrows, size_t ncols);
Matrix_f * Matrix_ij_f(size_t nrows, size_t ncols);
 Vector_f*linspace_f(float start, float end, int N);
 Vector_f*range_f(int start, int end, int diff);
float raisedBy10_f(float input);
 Vector_f*logspace_f(double start, double end, int n);
 Vector_f*Vector_linspace_f(float start, float end, int N);
 Vector_f*Vector_range_f(double start, int end, int diff);
Matrix_f *Matrix_diagonal_f(size_t n);
Matrix_f *Matrix_tridiagonal_f(size_t n);
Matrix_f * Matrix_value_f(size_t nrows, size_t ncols, float value);
Matrix_f * Matrix_random_f(size_t nrows, size_t ncols, int min, int max);
Matrix_f * Matrix_rand_f(size_t nrows, size_t ncols);
Matrix_f * Matrix_identity_f(size_t n);
void matprint_f(const Matrix_f *m);
void Matrix_print_f(const Matrix_f *m);
void Vector_print_head_f(const Matrix_f *m, int n);
void Matrix_print_iter_f(const Matrix_f *m);
void Matrix_summary_f(const Matrix_f *m);
void Matrix_print_all_digits_f(const Matrix_f *m);
void Matrix_print_fixed_f(const Matrix_f *m);
Matrix_f *Matrix_id_f(size_t m, size_t n);
static inline void print_el_f(const float el) {
    printf("%4.4f ", el);
}
static inline void print_el_end_f(const float el) {
    printf("%4.4f}\n", el);
}
Matrix_f *Matrix_K_f(size_t __n);
Matrix_f *Matrix_C_f(size_t __n);
Matrix_f *Matrix_T_f(size_t __n);
Matrix_f *Matrix_B_f(size_t __n);
static inline void add_each_f(float *__a, float *__b) {
    (*__a) += (*__b);
}
static inline void sub_each_f(float *__a, float *__b) {
    (*__a) -= (*__b);
}
static inline void mult_each_f(float *__a, float *__b) {
    (*__a) *= (*__b);
}
static inline void div_each_f(float *__a, float *__b) {
    (*__a) /= (*__b);
}
static inline void multscalar_f(float *__el, float __k) {
    (*__el) *= __k;
}
static inline void addscalar_f(float *__el, float __k) {
    (*__el) += __k;
}
static inline void divscalar_f(float *__el, float __k) {
    (*__el) /= __k;
}
static inline void subscalar_f(float *__el, float __k) {
    (*__el) -= __k;
}
void Matrix_foreach_f(Matrix_f *__A, EDITOR_f __fnc);
void Matrix_foreach_2_f(Matrix_f *__A, const Matrix_f *__B, EDITOR_2_f __fnc);
void Matrix_foreach_k_f(Matrix_f *__A, EDITOR_K_f __fnc, float __k);
void matadd_foreach_f(Matrix_f *__A, const Matrix_f *__B);
void matsub_foreach_f(Matrix_f *__A, const Matrix_f *__B);
void matmult_foreach_f(Matrix_f *__A, const Matrix_f *__B);
void matdiv_foreach_f(Matrix_f *__A, const Matrix_f *__B);
void matmultscalar_f(Matrix_f *__A, const float __k);
void mataddscalar_f(Matrix_f *__A, const float __k);
void matdivscalar_f(Matrix_f *__A, const float __k);
void matsubscalar_f(Matrix_f *__A, const float __k);
float matsum_f(const Matrix_f *__A);
float matmin_f(const Matrix_f *__A);
float matmax_f(const Matrix_f *__A);
Matrix_f *Matrix_mult_scalar_f(const Matrix_f *__A, const float __k);
Matrix_f *Matrix_add_scalar_f(const Matrix_f *__A, const float __k);
Matrix_f *Matrix_sub_scalar_f(const Matrix_f *__A, const float __k);
Matrix_f *Matrix_div_scalar_f(const Matrix_f *__A, const float __k);
void Matrix_mask_f(Matrix_f *__A, Mask_f __mask, EDITOR_f __operator);
void Matrix_mask_2_f(Matrix_f *__A, Matrix_f *__B, Mask_f __mask, EDITOR_2_f __operator);
void Matrix_mask_k_f(Matrix_f *__A, Mask_f __mask, EDITOR_K_f __operator, const float __k);
static inline _Bool Matrix_valid_bounds_f(const Matrix_f *__m, size_t __i, size_t __j) {
    return (__i < __m->nrows && __j < __m->ncols);
}
_Bool matcmp_f(const Matrix_f *__A, const Matrix_f *__B);
_Bool matcmp_bytes_f(const Matrix_f *__A, const Matrix_f *__B);
_Bool Matrix_comp_add_f(const Matrix_f *__A, const Matrix_f *__B);
_Bool Matrix_comp_mult_f(const Matrix_f *__A, const Matrix_f *__B);
static inline size_t Matrix_size_f(const Matrix_f *__A) {
    return __A->nrows * __A->ncols;
}
_Bool Matrix_is_square_f(const Matrix_f *__A);
_Bool Matrix_is_row_f(const Matrix_f *__A);
_Bool Matrix_is_col_f(const Matrix_f *__A);
_Bool Matrix_is_vec_f(const Matrix_f *__A);
size_t Matrix_rect_limit_f(const Matrix_f *__A);
static inline Matrix_f *reshape_f(Matrix_f *__m, size_t __nrow, size_t __ncol) {
    __m->nrows = __nrow;
    __m->ncols = __ncol;
    return __m;
}
static inline float matget_f(const Matrix_f *__m, size_t __i) {
    return __m->data[__i];
}
static inline void matset_f(Matrix_f *__m, size_t __i, size_t __j, float __value) {
    __m->data[__i * __m->ncols + __j] = __value;
}
static inline float matat_f(const Matrix_f *__m, size_t __i, size_t __j) {
    return __m->data[__i * __m->ncols + __j];
}
static inline float *matacc_f(const Matrix_f *__m, size_t __i, size_t __j) {
    return __m->data + (__i * __m->ncols + __j);
}
static inline void setelement_f(float *__el, const float __value) {
    *__el = __value;
}
static inline void matswap_f(float *__a, float *__b) {
    float temp = *__a;
    *(__a) = *(__b);
    *(__b) = temp;
}
static inline float Matrix_first_f(const Matrix_f *__m) {
    return matat_f(__m, 0, 0);
}
static inline float Matrix_last_f(const Matrix_f *__m) {
    return matat_f(__m, __m->nrows - 1, __m->ncols - 1);
}
static inline MatIter_f Matrix_begin_f(const Matrix_f *__m) {
    MatIter_f b = {.ptr = __m->data, .ptr_diff = 1};
    return b;
}
static inline MatIter_f Matrix_end_f(const Matrix_f *__m) {
    MatIter_f e = {.ptr = matacc_f(__m, __m->nrows - 1, __m->ncols), .ptr_diff = 1};
    return e;
}
static inline int Matrix_set_f(Matrix_f * __m, size_t __i, size_t __j, float __value) {
    if (Matrix_valid_bounds_f(__m, __i, __j)) {
        __m->data[__i*__m->ncols + __j] = __value;
        return 0;
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (set)\n");
        return 1;
    }
}
static inline float *matacc_check_f(const Matrix_f *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_f(__m, __i, __j)) {
        return __m->data + (__i*__m->ncols + __j);
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (access)\n");
        return ((void *)0);
    }
}
static inline float *Matrix_access_f(const Matrix_f * __m, size_t __i, size_t __j) {
    return matacc_check_f(__m, __i, __j);
}
static inline float Matrix_at_f(const Matrix_f *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_f(__m, __i, __j)) {
        return __m->data[__i * __m->ncols + __j];
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (at)\n");
        return -1;
    }
}
static inline void matcpyele_unsafe_f(Matrix_f *__dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_f *__src) {
    for (size_t i = __istart, irow = 0; i <= __iend; i++, irow++) {
        for (size_t j = __jstart, jcol = 0; j <= __jend; j++, jcol++) {
            Matrix_set_f(__dest, i, j, Matrix_at_f(__src, irow, jcol));
        }
    }
}
static inline int matcpyele_f(Matrix_f * __dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_f * __src) {
    if (__iend < __istart || __jend < __jstart || __iend >= __dest->nrows || __jend >= __dest->ncols) {
        perror("Selected submatrix is not contained within Parent Matrix\n");
        return -1;
    }
    if (__src->nrows != (__iend - __istart + 1) || __src->ncols != (__jend - __jstart + 1)) {
        perror("Selected submatrix not the same size as the src matrix to copy\n");
        return -2;
    }
    matcpyele_unsafe_f(__dest, __istart, __iend, __jstart, __jend, __src);
    return 0;
}
static inline void matsetrow_f(Matrix_f *__A, size_t __i, size_t __j, const float *__src, size_t __n) {
    float *row_start = matacc_f(__A, __i, __j);
    memcpy((void *) row_start, (void *) __src, sizeof(float) * __n);
}
static inline void matsetcol_f(Matrix_f *__A, size_t __i, size_t __j, const float *__src, size_t __n) {
    float *col_start = matacc_f(__A, __i, __j);
    for (size_t i = 0; i < __n; i++) {
        *(col_start + (__A->nrows * i)) = __src[i];
    }
}
void matsetrow_mult_k_f(MatIter_f __r, const MatIter_f __row_end, float __k);
void matsetrow_div_k_f(MatIter_f __r, const MatIter_f __row_end, float __k);
void matsetrow_add_k_f(MatIter_f __r, const MatIter_f __row_end, float __k);
void matsetrow_sub_k_f(MatIter_f __r, const MatIter_f __row_end, float __k);
int Matrix_mult_row_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_div_row_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_add_row_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_sub_row_k_f(Matrix_f *__A, const size_t __i, const float __k);
void matsetcol_mult_k_f(MatIter_f __c, const MatIter_f __col_end, float __k);
void matsetcol_div_k_f(MatIter_f __c, const MatIter_f __col_end, float __k);
void matsetcol_add_k_f(MatIter_f __c, const MatIter_f __col_end, float __k);
void matsetcol_sub_k_f(MatIter_f __c, const MatIter_f __col_end, float __k);
int Matrix_mult_col_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_div_col_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_add_col_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_sub_col_k_f(Matrix_f *__A, const size_t __i, const float __k);
int Matrix_set_row_f(Matrix_f *__A, size_t __i, const Matrix_f *__cow);
int Matrix_set_col_f(Matrix_f *__A, size_t __j, const Matrix_f *__col);
Matrix_f *Matrix_get_col_f(const Matrix_f *__A, size_t __j);
Matrix_f *Matrix_get_row_f(const Matrix_f *__A, size_t __i);
Matrix_f * submat_f(const Matrix_f * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_f * Matrix_submat_f(const Matrix_f * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_f * Matrix_minor_f(const Matrix_f * __A, size_t __irow, size_t __icol);
void matfill_f(Matrix_f *__A, const float __value);
void Matrix_fill_f(Matrix_f * __A, const float value);
void Matrix_fill_mask_f(Matrix_f *__A, Mask_f __mask, const float __value);
Matrix_f *Matrix_rcat_f(const Matrix_f *__A, const Matrix_f *__B);
Matrix_f *Matrix_ccat_f(const Matrix_f *__A, const Matrix_f *__B);
MatIter_f matdiagbegin_f(const Matrix_f *__m, const int __d);
MatIter_f matdiagend_f(const Matrix_f *__m, const int __d);
void MatIter_print_f(const MatIter_f __begin, const MatIter_f __end);
float Iter_dot_f(const MatIter_f __r, const MatIter_f __rend, const MatIter_f __c);
void Matrix_print_row_f(const Matrix_f *__A, size_t __i);
void Matrix_print_col_f(const Matrix_f *__A, size_t __j);
void Matrix_print_diag_f(const Matrix_f *__A, size_t __d);
void matrowop_add_f(Matrix_f *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void matrowop_add_scaled_f(Matrix_f *__A, const size_t __r1, const size_t __r2, const float __k, const size_t __col_offset);
void Matrix_rowop_add_f(Matrix_f *__A, const size_t __r1, const size_t __r2);
void Matrix_rowop_add_offset_f(Matrix_f *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void Matrix_rowop_add_scaled_f(Matrix_f *__A, const size_t __r1, const size_t __r2, const float __k);
float Matrix_row_min_f(const Matrix_f *__A, const size_t __i);
float Matrix_row_max_f(const Matrix_f *__A, const size_t __i);
float Matrix_col_min_f(const Matrix_f *__A, const size_t __j);
float Matrix_col_max_f(const Matrix_f *__A, const size_t __j);
float Matrix_diag_min_f(const Matrix_f *__A, const size_t __j);
float Matrix_diag_max_f(const Matrix_f *__A, const size_t __j);
float Matrix_row_prod_f(const Matrix_f *__A, const size_t __i);
float Matrix_col_prod_f(const Matrix_f *__A, const size_t __i);
float Matrix_diag_prod_f(const Matrix_f *__A, const size_t __i);
float Matrix_row_sum_f(const Matrix_f *__A, const size_t __i);
float Matrix_col_sum_f(const Matrix_f *__A, const size_t __i);
float Matrix_diag_sum_f(const Matrix_f *__A, const size_t __i);
MatIter_f matcolpos_f(const Matrix_f *__A, size_t __i, size_t __j);
MatIter_f Matrix_col_end_f(const Matrix_f *__A, size_t __j);
MatIter_f Matrix_col_begin_f(const Matrix_f *__A, size_t __j);
MatIter_f matcolbegin_f(const Matrix_f *__A, size_t __i);
MatIter_f matcolend_f(const Matrix_f *__A, size_t __i);
MatIter_f matrowpos_f(const Matrix_f *__A, size_t __i, size_t __j);
MatIter_f matrowbegin_f(const Matrix_f *__A, size_t __i);
MatIter_f matrowend_f(const Matrix_f *__A, size_t __i);
MatIter_f Matrix_row_end_f(const Matrix_f *__A, size_t __i);
MatIter_f Matrix_row_begin_f(const Matrix_f *__A, size_t __i);
static inline MatIter_f MatIter_new_f(float *__ptr, size_t __ptr_diff) {
    MatIter_f c = {.ptr = __ptr, .ptr_diff = __ptr_diff};
    return c;
}
static inline MatIter_f MatIter_null_f() {
    MatIter_f null = {.ptr = ((void *)0), .ptr_diff = 0};
    return null;
}
static inline _Bool MatIter_is_null_f(MatIter_f __i) {
    return __i.ptr == ((void *)0);
}
static inline MatIter_f MatIter_next_f(MatIter_f __c) {
    MatIter_f next = {.ptr = __c.ptr += __c.ptr_diff, .ptr_diff = __c.ptr_diff};
    return next;
}
static inline _Bool MatIter_cmp_f(const MatIter_f __lhs, const MatIter_f __rhs) {
    return __lhs.ptr == __rhs.ptr;
}
static inline float MatIter_value_f(const MatIter_f __c) {
    return *(__c.ptr);
}
static inline size_t MatIter_length_f(const MatIter_f begin, const MatIter_f end) {
    size_t diff = end.ptr - begin.ptr;
    return diff / begin.ptr_diff;
}
float MatIter_sum_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_prod_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_max_f(MatIter_f __a, const MatIter_f __b);
float MatIter_min_f(MatIter_f __a, const MatIter_f __b);
void MatIter_set_f(MatIter_f __r, const float __k);
void MatIter_add_k_f(MatIter_f __r, const float __k);
void MatIter_sub_k_f(MatIter_f __r, const float __k);
void MatIter_mult_k_f(MatIter_f __r, const float __k);
void MatIter_div_k_f(MatIter_f __r, const float __k);
void MatIter_set_ptr_f(MatIter_f __r, const float *__ptr);
void MatIter_add_ptr_f(MatIter_f __r, const float *__ptr);
void MatIter_sub_ptr_f(MatIter_f __r, const float *__ptr);
void MatIter_mult_ptr_f(MatIter_f __r, const float *__ptr);
void MatIter_div_ptr_f(MatIter_f __r, const float *__ptr);
void MatIter_set_iter_f(MatIter_f __a, const MatIter_f __b);
void MatIter_set_iter_pow_f(MatIter_f __a, const MatIter_f __b, float __n);
void MatIter_add_iter_f(MatIter_f __a, const MatIter_f __b);
void MatIter_add_iter_scaled_f(MatIter_f __a, const MatIter_f __b, const float __k);
void MatIter_sub_iter_f(MatIter_f __a, const MatIter_f __b);
void MatIter_mult_iter_f(MatIter_f __a, const MatIter_f __b);
void MatIter_div_iter_f(MatIter_f __a, const MatIter_f __b);
void MatIter_row_set_k_f(const MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_row_set_iter_f(const MatIter_f __rbegin, const MatIter_f __rend, const MatIter_f __bbegin);
void MatIter_row_add_k_f(const MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_row_sub_k_f(const MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_row_mult_k_f(const MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_row_div_k_f(const MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_row_add_row_f(const MatIter_f __abegin, const MatIter_f __aend, const MatIter_f __bbegin);
void MatIter_apply_f(const MatIter_f __rbegin, const MatIter_f __rend, MatIterFn_f __fn);
void MatIter_apply_k_f(const MatIter_f __rbegin, const MatIter_f __rend, const float __k, MatIterFn_k_f __fn_k);
void MatIter_apply_ptr_f(const MatIter_f __rbegin, const MatIter_f __rend, const float *__ptr, MatIterFn_ptr_f __fn_ptr);
void MatIter_apply_iter_f(const MatIter_f __abegin, const MatIter_f __aend, const MatIter_f __bbegin, MatIterFn_iter_f __fn_iter);
void MatIter_apply_iter_scaled_f(const MatIter_f __abegin, const MatIter_f __aend, const MatIter_f __bbegin, const float __k, MatIterFn_iter_k_f __fn_iter_k);
void MatIter_apply_set_k_f(MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_apply_add_k_f(MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_apply_sub_k_f(MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_apply_mult_k_f(MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_apply_div_k_f(MatIter_f __rbegin, const MatIter_f __rend, const float __k);
void MatIter_apply_set_ptr_f(MatIter_f __rbegin, const MatIter_f __rend, const float *__ptr);
void MatIter_apply_add_ptr_f(MatIter_f __rbegin, const MatIter_f __rend, const float *__ptr);
void MatIter_apply_sub_ptr_f(MatIter_f __rbegin, const MatIter_f __rend, const float *__ptr);
void MatIter_apply_mult_ptr_f(MatIter_f __rbegin, const MatIter_f __rend, const float *__ptr);
void MatIter_apply_div_ptr_f(MatIter_f __rbegin, const MatIter_f __rend, const float *__ptr);
void MatIter_apply_set_iter_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin);
void MatIter_apply_set_iter_pow_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin, double __n);
void MatIter_apply_add_iter_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin);
void MatIter_apply_sub_iter_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin);
void MatIter_apply_mult_iter_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin);
void MatIter_apply_div_iter_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin);
void MatIter_apply_add_iter_scaled_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin, const float __k);
Matrix_f *Matrix_set_col_iter_f(Matrix_f *__m, size_t __j, MatIter_f __source);
Matrix_f *Matrix_set_row_iter_f(Matrix_f *__m, size_t __i, MatIter_f __source);
MatIter_f Matrix_row_begin_from_col_f(const Matrix_f *__A, size_t __i, size_t __j);
MatIter_f Matrix_col_begin_from_row_f(const Matrix_f *__A, size_t __j, size_t __i);
MatIter_f Matrix_diag_end_f(const Matrix_f *__m, const int __d);
MatIter_f Matrix_diag_begin_f(const Matrix_f *__m, const int __d);
 Vector_f*MatIter_difference_f(MatIter_f __abegin, const MatIter_f __aend, MatIter_f __bbegin);
Matrix_f *Matrix_pow_f(Matrix_f * __A, size_t __power);
double Matrix_det_f(const Matrix_f * __A);
float matcdr_check_f(const Matrix_f *__A, const Matrix_f *__B, size_t __irow, size_t __icol);
static inline float matcdr_f(const Matrix_f *__A, const Matrix_f *__B, size_t __irow, size_t __icol) {
        float inner_product = 0;
        for (size_t i = 0; i < __A->ncols; i++) {
            inner_product += (matat_f(__A, __irow, i) * matat_f(__B, i, __icol));
        }
        return inner_product;
}
static inline Matrix_f *matmul_f(const Matrix_f *__A, const Matrix_f *__B) {
    Matrix_f *product = Matrix_new_f(__A->nrows, __B->ncols);
    if (product){
        for (size_t i = 0; i < __A->nrows; i++) {
            for (size_t j = 0; j < __B->ncols; j++) {
                matset_f(product, i, j, matcdr_f(__A, __B, i, j));
            }
        }
    }
    return product;
}
Matrix_f * Matrix_multiply_f(const Matrix_f *__A, const Matrix_f *__B);
void matadd_f(Matrix_f *__A, const Matrix_f *__B);
Matrix_f *Matrix_add_f(const Matrix_f *__A, const Matrix_f *__B);
void mathad_f(Matrix_f *__A, const Matrix_f *__B);
void mathad_check_f(Matrix_f *__A, const Matrix_f *__B);
void mathadexp_f(Matrix_f *__A, int __k);
Matrix_f *Matrix_hadamard_f(const Matrix_f *__A, const Matrix_f *__B);
void matsub_f(Matrix_f *__A, const Matrix_f *__B);
Matrix_f *Matrix_subtract_f(const Matrix_f *__A, const Matrix_f *__B);
float colnorm_f(const MatIter_f __begin, const MatIter_f __end);
float Matrix_col_norm_f(const Matrix_f *__A, size_t __j);
void matnormcol_f(const MatIter_f __begin, const MatIter_f __end);
void matnormcols_f(Matrix_f *__A);
void Matrix_normalize_col_f(Matrix_f *__A, size_t __j);
void Matrix_normalize_cols_f(Matrix_f *__A);
float Matrix_frobenius_f(const Matrix_f *__A);
Matrix_f *matlu_nopivot_f(Matrix_f *__A);
LU_f Matrix_lu_f(const Matrix_f *__A);
Matrix_f *Matrix_solve_lu_f(const Matrix_f *__A, const Vector_f*__b);
Matrix_f *gausselim_f(const Matrix_f *__A, const Matrix_f *__B);
Matrix_f *Matrix_inverse_f(const Matrix_f *__A);
 Vector_f*jacobi_iteration_f(const Matrix_f *__A, const Vector_f*__b, const Vector_f*__x0, float __crit);
Matrix_f *Matrix_vandermonde_f(const Vector_f*__v);
Matrix_f *Matrix_vandermonde_reduced_f(const Vector_f*__v, size_t __degree);
void Row_switch_f(Index_f *__ind, size_t __r1, size_t __r2);
void Row_multiply_f(Matrix_f *__m, Index_f *__ind, size_t __r, double __k);
void Row_addition_f(Matrix_f *__m, Index_f *__ind, size_t __r1, size_t __r2);
void Row_addition_k_f(Matrix_f *__m, Index_f *__ind, size_t __r1, size_t __r2, double __k);
 Vector_f*vector_f(int __count, ...);
 Vector_f*Vector_new_f(size_t __nrows);
 Vector_f*Vector_ones_f(size_t __nrows);
 Vector_f*Vector_from_iter_f(MatIter_f __begin, MatIter_f __end);
 Vector_f*Vector_rand_f(size_t __nrows);
 Vector_f*Vector_random_f(size_t __nrows, int __min, int __max);
 Vector_f*Vector_from_f(const float* __arr, size_t __nrows);
 Vector_f*Vector_clone_f(const Vector_f*__v);
 Vector_f*Vector_from_matrix_f(const Matrix_f *__m);
 Vector_f*Vector_as_col_f(const Vector_f*__v);
 Vector_f*Vector_as_row_f(const Vector_f*__v);
void Vector_free_f( Vector_f*__v);
void Vector_reset_f( Vector_f**__v);
 Vector_f*Matrix_as_col_f(const Matrix_f *__m);
 Vector_f*Matrix_as_row_f(const Matrix_f *__m);
size_t Vector_size_f(const Vector_f*__v);
void Vector_set_f( Vector_f*__v, size_t __pos, float __val);
void Vector_set_first_f( Vector_f*__v, float __val);
void Vector_set_last_f( Vector_f*__v, float __val);
float Vector_first_f(const Vector_f*__v);
float Vector_last_f(const Vector_f*__v);
MatIter_f Vector_begin_f(const Vector_f*__v);
MatIter_f Vector_end_f(const Vector_f*__v);
MatIter_f Vector_iter_f(const Vector_f*__v, size_t i);
float Vector_max_f(const Vector_f*__v);
float Vector_at_f(const Vector_f*__v, size_t __i);
static inline float vecat_f(const Vector_f*__v, size_t i) {
    return __v->data[i];
}
static inline float *vecacc_f(const Vector_f*__v, size_t i) {
    return &__v->data[i];
}
static inline void vecset_f(const Vector_f*__v, size_t i, float k) {
    __v->data[i] = k;
}
static inline float *vecptr_f(const Vector_f*__v, size_t i) {
    return &__v->data[i];
}
float *Vector_access_f(const Vector_f*__v, size_t __i);
 Vector_f*Vector_map_f(const Vector_f*__v, function_f __fn);
float Vector_sum_f(const Vector_f*__v);
void Vector_print_as_row_f(const Vector_f*__v);
float vecdot_f(const Vector_f*__u, const Vector_f*__v);
float Vector_inner_f(const Vector_f*__u, const Vector_f*__v);
 Vector_f*vecproject_f(const Vector_f*__v, const Vector_f*__u);
 Vector_f*Vector_project_onto_f(const Vector_f*__v, const Vector_f*__u);
float Vector_dot_f(const Vector_f*__u, const Vector_f*__v);
 Vector_f*Vector_hadamard_f(const Vector_f*__u, const Vector_f*__v);
Matrix_f *Vector_outer_f(const Vector_f*__u, const Vector_f*__v);
Matrix_f *Vector_orthogonal_projection_f(const Vector_f*__v);
float vecpnorm_f(const Vector_f*__u, const int __p);
static inline float vecnorm_f(const Vector_f*__A) {
    float sum = 0;
    const size_t n = Matrix_size_f(__A);
    for (size_t i = 0; i < n; i++) {
        sum += __A->data[i] * __A->data[i];
    }
    return sqrt(sum);
}
void vecnormalize_f( Vector_f*__u);
float Vector_norm_f(const Vector_f*__u);
float Vector_pnorm_f(const Vector_f*__u, const size_t __p);
 Vector_f*Vector_normalize_f(const Vector_f*__u);
 Vector_f*ascol_f( Vector_f*__v);
 Vector_f*asrow_f( Vector_f*__v);
float Vector_distance_f(const Vector_f*__v, const Vector_f*__u);
 Vector_f*Vector_difference_f(const Vector_f*__v, const Vector_f*__u);
static inline float log_f(float x) {
    return log(x);
}
float MatIter_mean_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_sum_squared_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_mean_squared_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_rms_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_var_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_std_f(const MatIter_f __begin, const MatIter_f __end);
float MatIter_sumabs_f(const MatIter_f __begin, const MatIter_f __end);
float Vector_iter_sum_f(const Vector_f*__v);
float Vector_iter_prod_f(const Vector_f*__v);
float Vector_iter_mean_f(const Vector_f*__v);
float Vector_iter_mean_squared_f(const Vector_f*__v);
float Vector_iter_rms_f(const Vector_f*__v);
float Vector_iter_min_f(const Vector_f*__v);
float Vector_iter_max_f(const Vector_f*__v);
float Vector_iter_var_f(const Vector_f*__v);
float Vector_iter_std_f(const Vector_f*__v);
float Matrix_iter_sum_f(const Matrix_f *__m);
float Matrix_iter_prod_f(const Matrix_f *__m);
float Matrix_iter_mean_f(const Matrix_f *__m);
float Matrix_iter_mean_squared_f(const Matrix_f *__m);
float Matrix_iter_rms_f(const Matrix_f *__m);
float Matrix_iter_min_f(const Matrix_f *__m);
float Matrix_iter_max_f(const Matrix_f *__m);
float Matrix_iter_var_f(const Matrix_f *__m);
float Matrix_iter_std_f(const Matrix_f *__m);
typedef float (* mat_iter_fn_f) (const MatIter_f, const MatIter_f);
float Matrix_iterate_f(const Matrix_f *__m, mat_iter_fn_f fn);
float mean_f(const Matrix_f *__m);
float sum_f(const Matrix_f *__m);
float std_f(const Matrix_f *__m);
float var_f(const Matrix_f *__m);
float min_f(const Matrix_f *__m);
float max_f(const Matrix_f *__m);
float maxabs_f(const Matrix_f *__m);
float sumabs_f(const Matrix_f *__m);
float rms_f(const Matrix_f *__m);
float mean_squared_f(const Matrix_f *__m);
float cov_f(const Matrix_f *__x, const Matrix_f *__y);
float prod_f(const Matrix_f *__m);
float cor_f(const Matrix_f *__x, const Matrix_f *__y);
float cmoment_f(const Vector_f*__v, int __k);
float rmoment_f(const Vector_f*__v, int __k);
 Vector_f*linear_regression_f(const Vector_f*__x, const Vector_f*__y);
static inline float ejovo_log_f (const float x) {
    return log(x);
}
static inline float ejovo_fabs_f (const float x) {
    return fabs((double) x);
}
 Vector_f*loglog_regression_f(const Vector_f*__x, const Vector_f*__y);
 Vector_f*least_squares_f(const Vector_f*__x, const Vector_f*__y, int degree);
Matrix_f *runif_f(int n, float a, float b);
Matrix_f *rnorm_f(int n, float mu, float sigma);
Matrix_f *rnorm_rng_f(int n, float mu, float sigma, RNG_FN rng_fn);
Matrix_f *runif_rng_f(int n, float a, float b, RNG_FN rng_fn);
Vector_f *Vector_runif_f(size_t __n, double __a, double __b);
Vector_f *Vector_rnorm_f(size_t __n, double __mean, double __std);
Vector_f *Vector_rexp_f(size_t __n, double __rate);
float Id_f(float x);
float x_squared_f(float x);
float x_cubed_f(float x);
 Vector_f*filter_f(const Vector_f*__v, predicate_fn_f __pred);
 Vector_f*filter_if_not_f(const Vector_f*__v, predicate_fn_f __pred);
 Vector_f*filter_lt_f(const Vector_f*__v, float __cutoff);
 Vector_f*filter_lteq_f(const Vector_f*__v, float __cutoff);
 Vector_f*filter_gt_f(const Vector_f*__v, float __cutoff);
 Vector_f*filter_gteq_f(const Vector_f*__v, float __cutoff);
Matrix_f *map_f(const Matrix_f *__m, function_f fn);
Matrix_f *apply_f(Matrix_f *__m, function_f fn);
float head_f(const Matrix_f *__m);
Matrix_f *take_f(const Matrix_f *__m, int n_el);
 Vector_f*tail_f(const Matrix_f *__m);
float last_f(const Matrix_f *__m);
 Vector_f*init_f(const Matrix_f *__m);
extern float TRUE_f;
extern float FALSE_f;
typedef Matrix_f Logical_f;
typedef float (* pred_fn_f) (float);
float true_fn_f(float d);
float NOT_f(float d);
float AND_f(float a, float b);
float OR_f(float a, float b);
_Bool Matrix_is_logical_f(const Matrix_f *__log);
_Bool Vector_is_logical_f(const Vector_f*__log);
int Matrix_mask_count_f(const Matrix_f *__mask);
int Vector_mask_count_f(const Vector_f*__mask);
Matrix_f *Matrix_as_logical_f(const Matrix_f *__m, pred_fn_f __fn);
Matrix_f *Matrix_as_true_f(const Matrix_f *__m);
Logical_f *Matrix_lt_f(const Matrix_f *__m, float __k);
Logical_f *Matrix_lteq_f(const Matrix_f *__m, float __k);
Logical_f *Matrix_gt_f(const Matrix_f *__m, float __k);
Logical_f *Matrix_gteq_f(const Matrix_f *__m, float __k);
void matsetmask_f(Matrix_f *__m, const Matrix_f *__mask, float __val);
void matsetpred_f(Matrix_f *__m, pred_fn_f __predicate, float __val);
 Vector_f*Matrix_filter_mask_f(const Matrix_f *__m, const Matrix_f *__mask);
_Bool Logical_all_f(const Matrix_f *__mask);
_Bool Logical_any_f(const Matrix_f *__mask);
Logical_f *Logical_not_f(const Matrix_f *__mask);
Matrix_f *Matrix_as_index_f(const Matrix_f *__m);
 Vector_f*Matrix_scrub_index_f(const Matrix_f *__m, const Index_f *__ind);
 Vector_f*matindex_f(const Matrix_f *__m, const Index_f *__ind);
 Vector_f*Matrix_index_f(const Matrix_f *__m, const Index_f *__ind);
 Vector_f*Matrix_logical_index_f(const Matrix_f *__m, const Logical_f *__log);
Index_f *Matrix_where_f(const Matrix_f *__m, pred_fn_f __fn);
static inline Index_f *Logical_get_index_f(const Logical_f *__log) {
    Index_f *ind = Vector_new_f(Vector_mask_count_f(__log));
    MatIter_f it = Matrix_begin_f(ind);
    for (size_t i = 0; i < Matrix_size_f(__log); i++) {
        if (matget_f(__log, i) == TRUE_f) {
            MatIter_set_f(it, i);
            it = MatIter_next_f(it);
        }
    }
    return ind;
}
Index_f *Matrix_where_lt_f(const Matrix_f *__m, double __k);
Index_f *Matrix_where_lteq_f(const Matrix_f *__m, double __k);
Index_f *Matrix_where_gt_f(const Matrix_f *__m, double __k);
Index_f *Matrix_where_gteq_f(const Matrix_f *__m, double __k);
Matrix_f *matsetind_f(Matrix_f *__m, const Matrix_f *__ind, const Matrix_f *__val);
Matrix_f *Matrix_set_index_f(const Matrix_f *__m, const Matrix_f *__ind, const Matrix_f *__val);
Matrix_f *Matrix_extract_rows_f(const Matrix_f *__m, Index_f *__ind);
Matrix_f *Matrix_extract_cols_f(const Matrix_f *__m, Index_f *__ind);
 Vector_f*Matrix_scrub_col_index_f(const Matrix_f *__m, const Index_f *__ind);
 Vector_f*Matrix_scrub_row_index_f(const Matrix_f *__m, const Index_f *__ind);
static inline _Bool is_int_f(double x) {
    return x == floor(x);
}
static inline _Bool are_col_indices_valid_f(const Matrix_f *__m, const Index_f *__ind) {
    MatIter_f it = Matrix_begin_f(__ind);
    const MatIter_f end = Matrix_begin_f(__ind);
    for(; !MatIter_cmp_f(it, end); it = MatIter_next_f(it)) {
        double val = MatIter_value_f(it);
        if (val < 0 || !is_int_f(val) || val >= __m->ncols) return 0;
    }
    return 1;
}
static inline _Bool are_row_indices_valid_f(const Matrix_f *__m, const Index_f *__ind) {
    MatIter_f it = Matrix_begin_f(__ind);
    const MatIter_f end = Matrix_begin_f(__ind);
    for(; !MatIter_cmp_f(it, end); it = MatIter_next_f(it)) {
        double val = MatIter_value_f(it);
        if (val < 0 || !is_int_f(val) || val >= __m->nrows) return 0;
    }
    return 1;
}
int MatIter_max_index_f(MatIter_f begin, const MatIter_f end);
int MatIter_min_index_f(MatIter_f begin, const MatIter_f end);
int Matrix_row_min_index_f(const Matrix_f *__m, size_t __i);
int Matrix_row_max_index_f(const Matrix_f *__m, size_t __i);
int Matrix_col_min_index_f(const Matrix_f *__m, size_t __i);
int Matrix_col_max_index_f(const Matrix_f *__m, size_t __i);
int Matrix_col_max_index_from_row_f(const Matrix_f *__m, size_t __j, size_t __i);
int Matrix_col_min_index_from_row_f(const Matrix_f *__m, size_t __j, size_t __i);
int Matrix_row_max_index_from_col_f(const Matrix_f *__m, size_t __i, size_t __j);
int Matrix_row_min_index_from_col_f(const Matrix_f *__m, size_t __i, size_t __j);
Matrix_f *Matrix_runif_f(size_t __m, size_t __n, float __a, float __b);
Matrix_f *Matrix_rnorm_f(size_t __m, size_t __n, float __mean, float __std);
Matrix_f *as_stochastic_f(Matrix_f *__m);
Matrix_f *as_row_stochastic_f(Matrix_f *__m);
Matrix_f *as_col_stochastic_f(Matrix_f *__m);
Matrix_f *as_doubly_stochastic_f(Matrix_f *__m);
Matrix_f *as_doubly_stochastic_DEPRECATED_f(Matrix_f *__m);
Matrix_f *Matrix_rexp_f(size_t __m, size_t __n, double __rate);
Matrix_f *Matrix_as_stochastic_f(const Matrix_f *__m);
Matrix_f *Stochastic_runif_f(size_t __n, double __a, double __b);
Matrix_f *Stochastic_rnorm_f(size_t __n, double __mean, double __std);
Matrix_f *Stochastic_rexp_f(size_t __n, double __rate);
 Vector_f*Vector_prob_unif_f(size_t __n);
 Vector_f*compute_row_sums_f(const Matrix_f *__m);
 Vector_f*compute_col_sums_f(const Matrix_f *__m);
extern const double PI;
extern const double TWO_PI;
extern const double HALF_PI;
extern const double EPS;
typedef struct Matrix_i {
    int *data;
    size_t nrows;
    size_t ncols;
} Matrix_i;
extern Matrix_i *g_ANON_i;
typedef struct {
    int *ptr;
    size_t ncols;
} ColIter_i;
typedef struct {
    int *ptr;
    size_t ptr_diff;
} RowIter_i;
typedef struct {
    int *ptr;
    size_t ptr_diff;
} MatIter_i;
typedef Matrix_i Vector_i;
typedef void (* EDITOR_i) (int *);
typedef void (* EDITOR_2_i) (int *, int *);
typedef void (* EDITOR_K_i) (int *, int);
typedef _Bool (* Mask_i) (int *);
typedef struct {
    Matrix_i *L;
    Matrix_i *U;
} LU_i;
typedef struct {
    Matrix_i *L;
    Matrix_i *U;
    Vector_i*P;
} LUP_i;
typedef struct {
    Matrix_i *L;
    Matrix_i *D;
    Vector_i*U;
} LDU_i;
typedef void (* MatIterFn_i) (MatIter_i);
typedef void (* MatIterFn_k_i) (MatIter_i, int);
typedef void (* MatIterFn_ptr_i) (MatIter_i, const int *);
typedef void (* MatIterFn_iter_i) (MatIter_i, MatIter_i);
typedef void (* MatIterFn_iter_k_i) (MatIter_i, MatIter_i, const int);
typedef void (* ColIterFn_i) (ColIter_i *);
typedef void (* ColIterFn_k_i) (ColIter_i*, int);
typedef void (* ColIterFn_ptr_i) (ColIter_i*, const int *);
typedef void (* ColIterFn_iter_i) (ColIter_i*, ColIter_i*);
typedef void (* RowIterFn_i) (RowIter_i*);
typedef void (* RowIterFn_k_i) (RowIter_i*, int);
typedef void (* RowIterFn_ptr_i) (RowIter_i*, const int *);
typedef void (* RowIterFn_iter_i) (RowIter_i*, RowIter_i*);
typedef void (* RowIterFn_iter_k_i) (RowIter_i*, RowIter_i*, const int);
typedef int (* function_i) (int);
typedef _Bool (* predicate_fn_i) (int);
typedef Matrix_i Index_i;
static inline Matrix_i *matalloc_i(size_t __nrows, size_t __ncols) {
    Matrix_i *x = (Matrix_i *) malloc(sizeof(Matrix_i));
    int *data = (int *) malloc(sizeof(int) * (__nrows * __ncols));
    x->data = data;
    x->nrows = __nrows;
    x->ncols = __ncols;
    return x;
}
Matrix_i *matvec_i(double k);
Matrix_i *matanon_i(int __count, ...);
static inline void matfree_i(Matrix_i *__A) {
    free(__A->data);
    free(__A);
}
static inline void Matrix_free_i(Matrix_i *__A) {
    if (__A) {
        if (__A->data) free(__A->data);
        free(__A);
    }
}
static inline void Matrix_reset_i(Matrix_i **__A_ptr) {
    if (*__A_ptr) {
        if ((*__A_ptr)->data) free((*__A_ptr)->data);
        free (*__A_ptr);
    }
    *__A_ptr = ((void *)0);
}
Matrix_i *Matrix_renew_i(Matrix_i *A, int m, int n);
static inline _Bool matcpy_i(Matrix_i *restrict __dest, const Matrix_i *restrict __src) {
    memcpy(__dest->data, __src->data, sizeof(int)*(__src->nrows * __src->ncols));
    __dest->ncols = __src->ncols;
    __dest->nrows = __src->nrows;
    if(__dest && __src && __dest->data) {
        return 1;
    } else {
        return 0;
    }
}
Matrix_i * matclone_i(const Matrix_i *restrict __src);
Matrix_i *Matrix_catch_i(Matrix_i **__lhs_ptr, Matrix_i *__anon_rhs);
Matrix_i *Matrix_anon_i(Matrix_i *__anon_rhs);
void Matrix_anon_free_i();
Matrix_i *Matrix_transpose_i(const Matrix_i *m);
Matrix_i *Matrix_shallow_copy_i(const Matrix_i *rhs);
Matrix_i *Matrix_take_i(Matrix_i *rhs);
Matrix_i * Matrix_new_i(int nrows, int ncols);
Matrix_i *Matrix_move_i(int **arr_ptr, size_t nrows, size_t ncols);
Matrix_i *Matrix_from_i(const int *arr, size_t nrows, size_t ncols);
Matrix_i *Matrix_colvec_i(const int *arr, size_t nrows);
Matrix_i *Matrix_rowvec_i(const int *arr, size_t ncols);
Matrix_i * Matrix_clone_i(const Matrix_i *restrict src);
Matrix_i * Matrix_ones_i(size_t nrows, size_t ncols);
Matrix_i * Matrix_ij_i(size_t nrows, size_t ncols);
 Vector_i*linspace_i(int start, int end, int N);
 Vector_i*range_i(int start, int end, int diff);
int raisedBy10_i(int input);
 Vector_i*logspace_i(double start, double end, int n);
 Vector_i*Vector_linspace_i(int start, int end, int N);
 Vector_i*Vector_range_i(double start, int end, int diff);
Matrix_i *Matrix_diagonal_i(size_t n);
Matrix_i *Matrix_tridiagonal_i(size_t n);
Matrix_i * Matrix_value_i(size_t nrows, size_t ncols, int value);
Matrix_i * Matrix_random_i(size_t nrows, size_t ncols, int min, int max);
Matrix_i * Matrix_rand_i(size_t nrows, size_t ncols);
Matrix_i * Matrix_identity_i(size_t n);
void matprint_i(const Matrix_i *m);
void Matrix_print_i(const Matrix_i *m);
void Vector_print_head_i(const Matrix_i *m, int n);
void Matrix_print_iter_i(const Matrix_i *m);
void Matrix_summary_i(const Matrix_i *m);
void Matrix_print_all_digits_i(const Matrix_i *m);
void Matrix_print_fixed_i(const Matrix_i *m);
Matrix_i *Matrix_id_i(size_t m, size_t n);
static inline void print_el_i(const int el) {
    printf("%5d ", el);
}
static inline void print_el_end_i(const int el) {
    printf("%5d}\n", el);
}
Matrix_i *Matrix_K_i(size_t __n);
Matrix_i *Matrix_C_i(size_t __n);
Matrix_i *Matrix_T_i(size_t __n);
Matrix_i *Matrix_B_i(size_t __n);
static inline void add_each_i(int *__a, int *__b) {
    (*__a) += (*__b);
}
static inline void sub_each_i(int *__a, int *__b) {
    (*__a) -= (*__b);
}
static inline void mult_each_i(int *__a, int *__b) {
    (*__a) *= (*__b);
}
static inline void div_each_i(int *__a, int *__b) {
    (*__a) /= (*__b);
}
static inline void multscalar_i(int *__el, int __k) {
    (*__el) *= __k;
}
static inline void addscalar_i(int *__el, int __k) {
    (*__el) += __k;
}
static inline void divscalar_i(int *__el, int __k) {
    (*__el) /= __k;
}
static inline void subscalar_i(int *__el, int __k) {
    (*__el) -= __k;
}
void Matrix_foreach_i(Matrix_i *__A, EDITOR_i __fnc);
void Matrix_foreach_2_i(Matrix_i *__A, const Matrix_i *__B, EDITOR_2_i __fnc);
void Matrix_foreach_k_i(Matrix_i *__A, EDITOR_K_i __fnc, int __k);
void matadd_foreach_i(Matrix_i *__A, const Matrix_i *__B);
void matsub_foreach_i(Matrix_i *__A, const Matrix_i *__B);
void matmult_foreach_i(Matrix_i *__A, const Matrix_i *__B);
void matdiv_foreach_i(Matrix_i *__A, const Matrix_i *__B);
void matmultscalar_i(Matrix_i *__A, const int __k);
void mataddscalar_i(Matrix_i *__A, const int __k);
void matdivscalar_i(Matrix_i *__A, const int __k);
void matsubscalar_i(Matrix_i *__A, const int __k);
int matsum_i(const Matrix_i *__A);
int matmin_i(const Matrix_i *__A);
int matmax_i(const Matrix_i *__A);
Matrix_i *Matrix_mult_scalar_i(const Matrix_i *__A, const int __k);
Matrix_i *Matrix_add_scalar_i(const Matrix_i *__A, const int __k);
Matrix_i *Matrix_sub_scalar_i(const Matrix_i *__A, const int __k);
Matrix_i *Matrix_div_scalar_i(const Matrix_i *__A, const int __k);
void Matrix_mask_i(Matrix_i *__A, Mask_i __mask, EDITOR_i __operator);
void Matrix_mask_2_i(Matrix_i *__A, Matrix_i *__B, Mask_i __mask, EDITOR_2_i __operator);
void Matrix_mask_k_i(Matrix_i *__A, Mask_i __mask, EDITOR_K_i __operator, const int __k);
static inline _Bool Matrix_valid_bounds_i(const Matrix_i *__m, size_t __i, size_t __j) {
    return (__i < __m->nrows && __j < __m->ncols);
}
_Bool matcmp_i(const Matrix_i *__A, const Matrix_i *__B);
_Bool matcmp_bytes_i(const Matrix_i *__A, const Matrix_i *__B);
_Bool Matrix_comp_add_i(const Matrix_i *__A, const Matrix_i *__B);
_Bool Matrix_comp_mult_i(const Matrix_i *__A, const Matrix_i *__B);
static inline size_t Matrix_size_i(const Matrix_i *__A) {
    return __A->nrows * __A->ncols;
}
_Bool Matrix_is_square_i(const Matrix_i *__A);
_Bool Matrix_is_row_i(const Matrix_i *__A);
_Bool Matrix_is_col_i(const Matrix_i *__A);
_Bool Matrix_is_vec_i(const Matrix_i *__A);
size_t Matrix_rect_limit_i(const Matrix_i *__A);
static inline Matrix_i *reshape_i(Matrix_i *__m, size_t __nrow, size_t __ncol) {
    __m->nrows = __nrow;
    __m->ncols = __ncol;
    return __m;
}
static inline int matget_i(const Matrix_i *__m, size_t __i) {
    return __m->data[__i];
}
static inline void matset_i(Matrix_i *__m, size_t __i, size_t __j, int __value) {
    __m->data[__i * __m->ncols + __j] = __value;
}
static inline int matat_i(const Matrix_i *__m, size_t __i, size_t __j) {
    return __m->data[__i * __m->ncols + __j];
}
static inline int *matacc_i(const Matrix_i *__m, size_t __i, size_t __j) {
    return __m->data + (__i * __m->ncols + __j);
}
static inline void setelement_i(int *__el, const int __value) {
    *__el = __value;
}
static inline void matswap_i(int *__a, int *__b) {
    int temp = *__a;
    *(__a) = *(__b);
    *(__b) = temp;
}
static inline int Matrix_first_i(const Matrix_i *__m) {
    return matat_i(__m, 0, 0);
}
static inline int Matrix_last_i(const Matrix_i *__m) {
    return matat_i(__m, __m->nrows - 1, __m->ncols - 1);
}
static inline MatIter_i Matrix_begin_i(const Matrix_i *__m) {
    MatIter_i b = {.ptr = __m->data, .ptr_diff = 1};
    return b;
}
static inline MatIter_i Matrix_end_i(const Matrix_i *__m) {
    MatIter_i e = {.ptr = matacc_i(__m, __m->nrows - 1, __m->ncols), .ptr_diff = 1};
    return e;
}
static inline int Matrix_set_i(Matrix_i * __m, size_t __i, size_t __j, int __value) {
    if (Matrix_valid_bounds_i(__m, __i, __j)) {
        __m->data[__i*__m->ncols + __j] = __value;
        return 0;
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (set)\n");
        return 1;
    }
}
static inline int *matacc_check_i(const Matrix_i *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_i(__m, __i, __j)) {
        return __m->data + (__i*__m->ncols + __j);
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (access)\n");
        return ((void *)0);
    }
}
static inline int *Matrix_access_i(const Matrix_i * __m, size_t __i, size_t __j) {
    return matacc_check_i(__m, __i, __j);
}
static inline int Matrix_at_i(const Matrix_i *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_i(__m, __i, __j)) {
        return __m->data[__i * __m->ncols + __j];
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (at)\n");
        return -1;
    }
}
static inline void matcpyele_unsafe_i(Matrix_i *__dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_i *__src) {
    for (size_t i = __istart, irow = 0; i <= __iend; i++, irow++) {
        for (size_t j = __jstart, jcol = 0; j <= __jend; j++, jcol++) {
            Matrix_set_i(__dest, i, j, Matrix_at_i(__src, irow, jcol));
        }
    }
}
static inline int matcpyele_i(Matrix_i * __dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_i * __src) {
    if (__iend < __istart || __jend < __jstart || __iend >= __dest->nrows || __jend >= __dest->ncols) {
        perror("Selected submatrix is not contained within Parent Matrix\n");
        return -1;
    }
    if (__src->nrows != (__iend - __istart + 1) || __src->ncols != (__jend - __jstart + 1)) {
        perror("Selected submatrix not the same size as the src matrix to copy\n");
        return -2;
    }
    matcpyele_unsafe_i(__dest, __istart, __iend, __jstart, __jend, __src);
    return 0;
}
static inline void matsetrow_i(Matrix_i *__A, size_t __i, size_t __j, const int *__src, size_t __n) {
    int *row_start = matacc_i(__A, __i, __j);
    memcpy((void *) row_start, (void *) __src, sizeof(int) * __n);
}
static inline void matsetcol_i(Matrix_i *__A, size_t __i, size_t __j, const int *__src, size_t __n) {
    int *col_start = matacc_i(__A, __i, __j);
    for (size_t i = 0; i < __n; i++) {
        *(col_start + (__A->nrows * i)) = __src[i];
    }
}
void matsetrow_mult_k_i(MatIter_i __r, const MatIter_i __row_end, int __k);
void matsetrow_div_k_i(MatIter_i __r, const MatIter_i __row_end, int __k);
void matsetrow_add_k_i(MatIter_i __r, const MatIter_i __row_end, int __k);
void matsetrow_sub_k_i(MatIter_i __r, const MatIter_i __row_end, int __k);
int Matrix_mult_row_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_div_row_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_add_row_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_sub_row_k_i(Matrix_i *__A, const size_t __i, const int __k);
void matsetcol_mult_k_i(MatIter_i __c, const MatIter_i __col_end, int __k);
void matsetcol_div_k_i(MatIter_i __c, const MatIter_i __col_end, int __k);
void matsetcol_add_k_i(MatIter_i __c, const MatIter_i __col_end, int __k);
void matsetcol_sub_k_i(MatIter_i __c, const MatIter_i __col_end, int __k);
int Matrix_mult_col_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_div_col_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_add_col_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_sub_col_k_i(Matrix_i *__A, const size_t __i, const int __k);
int Matrix_set_row_i(Matrix_i *__A, size_t __i, const Matrix_i *__cow);
int Matrix_set_col_i(Matrix_i *__A, size_t __j, const Matrix_i *__col);
Matrix_i *Matrix_get_col_i(const Matrix_i *__A, size_t __j);
Matrix_i *Matrix_get_row_i(const Matrix_i *__A, size_t __i);
Matrix_i * submat_i(const Matrix_i * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_i * Matrix_submat_i(const Matrix_i * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_i * Matrix_minor_i(const Matrix_i * __A, size_t __irow, size_t __icol);
void matfill_i(Matrix_i *__A, const int __value);
void Matrix_fill_i(Matrix_i * __A, const int value);
void Matrix_fill_mask_i(Matrix_i *__A, Mask_i __mask, const int __value);
Matrix_i *Matrix_rcat_i(const Matrix_i *__A, const Matrix_i *__B);
Matrix_i *Matrix_ccat_i(const Matrix_i *__A, const Matrix_i *__B);
MatIter_i matdiagbegin_i(const Matrix_i *__m, const int __d);
MatIter_i matdiagend_i(const Matrix_i *__m, const int __d);
void MatIter_print_i(const MatIter_i __begin, const MatIter_i __end);
int Iter_dot_i(const MatIter_i __r, const MatIter_i __rend, const MatIter_i __c);
void Matrix_print_row_i(const Matrix_i *__A, size_t __i);
void Matrix_print_col_i(const Matrix_i *__A, size_t __j);
void Matrix_print_diag_i(const Matrix_i *__A, size_t __d);
void matrowop_add_i(Matrix_i *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void matrowop_add_scaled_i(Matrix_i *__A, const size_t __r1, const size_t __r2, const int __k, const size_t __col_offset);
void Matrix_rowop_add_i(Matrix_i *__A, const size_t __r1, const size_t __r2);
void Matrix_rowop_add_offset_i(Matrix_i *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void Matrix_rowop_add_scaled_i(Matrix_i *__A, const size_t __r1, const size_t __r2, const int __k);
int Matrix_row_min_i(const Matrix_i *__A, const size_t __i);
int Matrix_row_max_i(const Matrix_i *__A, const size_t __i);
int Matrix_col_min_i(const Matrix_i *__A, const size_t __j);
int Matrix_col_max_i(const Matrix_i *__A, const size_t __j);
int Matrix_diag_min_i(const Matrix_i *__A, const size_t __j);
int Matrix_diag_max_i(const Matrix_i *__A, const size_t __j);
int Matrix_row_prod_i(const Matrix_i *__A, const size_t __i);
int Matrix_col_prod_i(const Matrix_i *__A, const size_t __i);
int Matrix_diag_prod_i(const Matrix_i *__A, const size_t __i);
int Matrix_row_sum_i(const Matrix_i *__A, const size_t __i);
int Matrix_col_sum_i(const Matrix_i *__A, const size_t __i);
int Matrix_diag_sum_i(const Matrix_i *__A, const size_t __i);
MatIter_i matcolpos_i(const Matrix_i *__A, size_t __i, size_t __j);
MatIter_i Matrix_col_end_i(const Matrix_i *__A, size_t __j);
MatIter_i Matrix_col_begin_i(const Matrix_i *__A, size_t __j);
MatIter_i matcolbegin_i(const Matrix_i *__A, size_t __i);
MatIter_i matcolend_i(const Matrix_i *__A, size_t __i);
MatIter_i matrowpos_i(const Matrix_i *__A, size_t __i, size_t __j);
MatIter_i matrowbegin_i(const Matrix_i *__A, size_t __i);
MatIter_i matrowend_i(const Matrix_i *__A, size_t __i);
MatIter_i Matrix_row_end_i(const Matrix_i *__A, size_t __i);
MatIter_i Matrix_row_begin_i(const Matrix_i *__A, size_t __i);
static inline MatIter_i MatIter_new_i(int *__ptr, size_t __ptr_diff) {
    MatIter_i c = {.ptr = __ptr, .ptr_diff = __ptr_diff};
    return c;
}
static inline MatIter_i MatIter_null_i() {
    MatIter_i null = {.ptr = ((void *)0), .ptr_diff = 0};
    return null;
}
static inline _Bool MatIter_is_null_i(MatIter_i __i) {
    return __i.ptr == ((void *)0);
}
static inline MatIter_i MatIter_next_i(MatIter_i __c) {
    MatIter_i next = {.ptr = __c.ptr += __c.ptr_diff, .ptr_diff = __c.ptr_diff};
    return next;
}
static inline _Bool MatIter_cmp_i(const MatIter_i __lhs, const MatIter_i __rhs) {
    return __lhs.ptr == __rhs.ptr;
}
static inline int MatIter_value_i(const MatIter_i __c) {
    return *(__c.ptr);
}
static inline size_t MatIter_length_i(const MatIter_i begin, const MatIter_i end) {
    size_t diff = end.ptr - begin.ptr;
    return diff / begin.ptr_diff;
}
int MatIter_sum_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_prod_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_max_i(MatIter_i __a, const MatIter_i __b);
int MatIter_min_i(MatIter_i __a, const MatIter_i __b);
void MatIter_set_i(MatIter_i __r, const int __k);
void MatIter_add_k_i(MatIter_i __r, const int __k);
void MatIter_sub_k_i(MatIter_i __r, const int __k);
void MatIter_mult_k_i(MatIter_i __r, const int __k);
void MatIter_div_k_i(MatIter_i __r, const int __k);
void MatIter_set_ptr_i(MatIter_i __r, const int *__ptr);
void MatIter_add_ptr_i(MatIter_i __r, const int *__ptr);
void MatIter_sub_ptr_i(MatIter_i __r, const int *__ptr);
void MatIter_mult_ptr_i(MatIter_i __r, const int *__ptr);
void MatIter_div_ptr_i(MatIter_i __r, const int *__ptr);
void MatIter_set_iter_i(MatIter_i __a, const MatIter_i __b);
void MatIter_set_iter_pow_i(MatIter_i __a, const MatIter_i __b, int __n);
void MatIter_add_iter_i(MatIter_i __a, const MatIter_i __b);
void MatIter_add_iter_scaled_i(MatIter_i __a, const MatIter_i __b, const int __k);
void MatIter_sub_iter_i(MatIter_i __a, const MatIter_i __b);
void MatIter_mult_iter_i(MatIter_i __a, const MatIter_i __b);
void MatIter_div_iter_i(MatIter_i __a, const MatIter_i __b);
void MatIter_row_set_k_i(const MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_row_set_iter_i(const MatIter_i __rbegin, const MatIter_i __rend, const MatIter_i __bbegin);
void MatIter_row_add_k_i(const MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_row_sub_k_i(const MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_row_mult_k_i(const MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_row_div_k_i(const MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_row_add_row_i(const MatIter_i __abegin, const MatIter_i __aend, const MatIter_i __bbegin);
void MatIter_apply_i(const MatIter_i __rbegin, const MatIter_i __rend, MatIterFn_i __fn);
void MatIter_apply_k_i(const MatIter_i __rbegin, const MatIter_i __rend, const int __k, MatIterFn_k_i __fn_k);
void MatIter_apply_ptr_i(const MatIter_i __rbegin, const MatIter_i __rend, const int *__ptr, MatIterFn_ptr_i __fn_ptr);
void MatIter_apply_iter_i(const MatIter_i __abegin, const MatIter_i __aend, const MatIter_i __bbegin, MatIterFn_iter_i __fn_iter);
void MatIter_apply_iter_scaled_i(const MatIter_i __abegin, const MatIter_i __aend, const MatIter_i __bbegin, const int __k, MatIterFn_iter_k_i __fn_iter_k);
void MatIter_apply_set_k_i(MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_apply_add_k_i(MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_apply_sub_k_i(MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_apply_mult_k_i(MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_apply_div_k_i(MatIter_i __rbegin, const MatIter_i __rend, const int __k);
void MatIter_apply_set_ptr_i(MatIter_i __rbegin, const MatIter_i __rend, const int *__ptr);
void MatIter_apply_add_ptr_i(MatIter_i __rbegin, const MatIter_i __rend, const int *__ptr);
void MatIter_apply_sub_ptr_i(MatIter_i __rbegin, const MatIter_i __rend, const int *__ptr);
void MatIter_apply_mult_ptr_i(MatIter_i __rbegin, const MatIter_i __rend, const int *__ptr);
void MatIter_apply_div_ptr_i(MatIter_i __rbegin, const MatIter_i __rend, const int *__ptr);
void MatIter_apply_set_iter_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin);
void MatIter_apply_set_iter_pow_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin, double __n);
void MatIter_apply_add_iter_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin);
void MatIter_apply_sub_iter_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin);
void MatIter_apply_mult_iter_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin);
void MatIter_apply_div_iter_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin);
void MatIter_apply_add_iter_scaled_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin, const int __k);
Matrix_i *Matrix_set_col_iter_i(Matrix_i *__m, size_t __j, MatIter_i __source);
Matrix_i *Matrix_set_row_iter_i(Matrix_i *__m, size_t __i, MatIter_i __source);
MatIter_i Matrix_row_begin_from_col_i(const Matrix_i *__A, size_t __i, size_t __j);
MatIter_i Matrix_col_begin_from_row_i(const Matrix_i *__A, size_t __j, size_t __i);
MatIter_i Matrix_diag_end_i(const Matrix_i *__m, const int __d);
MatIter_i Matrix_diag_begin_i(const Matrix_i *__m, const int __d);
 Vector_i*MatIter_difference_i(MatIter_i __abegin, const MatIter_i __aend, MatIter_i __bbegin);
Matrix_i *Matrix_pow_i(Matrix_i * __A, size_t __power);
double Matrix_det_i(const Matrix_i * __A);
int matcdr_check_i(const Matrix_i *__A, const Matrix_i *__B, size_t __irow, size_t __icol);
static inline int matcdr_i(const Matrix_i *__A, const Matrix_i *__B, size_t __irow, size_t __icol) {
        int inner_product = 0;
        for (size_t i = 0; i < __A->ncols; i++) {
            inner_product += (matat_i(__A, __irow, i) * matat_i(__B, i, __icol));
        }
        return inner_product;
}
static inline Matrix_i *matmul_i(const Matrix_i *__A, const Matrix_i *__B) {
    Matrix_i *product = Matrix_new_i(__A->nrows, __B->ncols);
    if (product){
        for (size_t i = 0; i < __A->nrows; i++) {
            for (size_t j = 0; j < __B->ncols; j++) {
                matset_i(product, i, j, matcdr_i(__A, __B, i, j));
            }
        }
    }
    return product;
}
Matrix_i * Matrix_multiply_i(const Matrix_i *__A, const Matrix_i *__B);
void matadd_i(Matrix_i *__A, const Matrix_i *__B);
Matrix_i *Matrix_add_i(const Matrix_i *__A, const Matrix_i *__B);
void mathad_i(Matrix_i *__A, const Matrix_i *__B);
void mathad_check_i(Matrix_i *__A, const Matrix_i *__B);
void mathadexp_i(Matrix_i *__A, int __k);
Matrix_i *Matrix_hadamard_i(const Matrix_i *__A, const Matrix_i *__B);
void matsub_i(Matrix_i *__A, const Matrix_i *__B);
Matrix_i *Matrix_subtract_i(const Matrix_i *__A, const Matrix_i *__B);
int colnorm_i(const MatIter_i __begin, const MatIter_i __end);
int Matrix_col_norm_i(const Matrix_i *__A, size_t __j);
void matnormcol_i(const MatIter_i __begin, const MatIter_i __end);
void matnormcols_i(Matrix_i *__A);
void Matrix_normalize_col_i(Matrix_i *__A, size_t __j);
void Matrix_normalize_cols_i(Matrix_i *__A);
int Matrix_frobenius_i(const Matrix_i *__A);
Matrix_i *matlu_nopivot_i(Matrix_i *__A);
LU_i Matrix_lu_i(const Matrix_i *__A);
Matrix_i *Matrix_solve_lu_i(const Matrix_i *__A, const Vector_i*__b);
Matrix_i *gausselim_i(const Matrix_i *__A, const Matrix_i *__B);
Matrix_i *Matrix_inverse_i(const Matrix_i *__A);
 Vector_i*jacobi_iteration_i(const Matrix_i *__A, const Vector_i*__b, const Vector_i*__x0, int __crit);
Matrix_i *Matrix_vandermonde_i(const Vector_i*__v);
Matrix_i *Matrix_vandermonde_reduced_i(const Vector_i*__v, size_t __degree);
void Row_switch_i(Index_i *__ind, size_t __r1, size_t __r2);
void Row_multiply_i(Matrix_i *__m, Index_i *__ind, size_t __r, double __k);
void Row_addition_i(Matrix_i *__m, Index_i *__ind, size_t __r1, size_t __r2);
void Row_addition_k_i(Matrix_i *__m, Index_i *__ind, size_t __r1, size_t __r2, double __k);
 Vector_i*vector_i(int __count, ...);
 Vector_i*Vector_new_i(size_t __nrows);
 Vector_i*Vector_ones_i(size_t __nrows);
 Vector_i*Vector_from_iter_i(MatIter_i __begin, MatIter_i __end);
 Vector_i*Vector_rand_i(size_t __nrows);
 Vector_i*Vector_random_i(size_t __nrows, int __min, int __max);
 Vector_i*Vector_from_i(const int* __arr, size_t __nrows);
 Vector_i*Vector_clone_i(const Vector_i*__v);
 Vector_i*Vector_from_matrix_i(const Matrix_i *__m);
 Vector_i*Vector_as_col_i(const Vector_i*__v);
 Vector_i*Vector_as_row_i(const Vector_i*__v);
void Vector_free_i( Vector_i*__v);
void Vector_reset_i( Vector_i**__v);
 Vector_i*Matrix_as_col_i(const Matrix_i *__m);
 Vector_i*Matrix_as_row_i(const Matrix_i *__m);
size_t Vector_size_i(const Vector_i*__v);
void Vector_set_i( Vector_i*__v, size_t __pos, int __val);
void Vector_set_first_i( Vector_i*__v, int __val);
void Vector_set_last_i( Vector_i*__v, int __val);
int Vector_first_i(const Vector_i*__v);
int Vector_last_i(const Vector_i*__v);
MatIter_i Vector_begin_i(const Vector_i*__v);
MatIter_i Vector_end_i(const Vector_i*__v);
MatIter_i Vector_iter_i(const Vector_i*__v, size_t i);
int Vector_max_i(const Vector_i*__v);
int Vector_at_i(const Vector_i*__v, size_t __i);
static inline int vecat_i(const Vector_i*__v, size_t i) {
    return __v->data[i];
}
static inline int *vecacc_i(const Vector_i*__v, size_t i) {
    return &__v->data[i];
}
static inline void vecset_i(const Vector_i*__v, size_t i, int k) {
    __v->data[i] = k;
}
static inline int *vecptr_i(const Vector_i*__v, size_t i) {
    return &__v->data[i];
}
int *Vector_access_i(const Vector_i*__v, size_t __i);
 Vector_i*Vector_map_i(const Vector_i*__v, function_i __fn);
int Vector_sum_i(const Vector_i*__v);
void Vector_print_as_row_i(const Vector_i*__v);
int vecdot_i(const Vector_i*__u, const Vector_i*__v);
int Vector_inner_i(const Vector_i*__u, const Vector_i*__v);
 Vector_i*vecproject_i(const Vector_i*__v, const Vector_i*__u);
 Vector_i*Vector_project_onto_i(const Vector_i*__v, const Vector_i*__u);
int Vector_dot_i(const Vector_i*__u, const Vector_i*__v);
 Vector_i*Vector_hadamard_i(const Vector_i*__u, const Vector_i*__v);
Matrix_i *Vector_outer_i(const Vector_i*__u, const Vector_i*__v);
Matrix_i *Vector_orthogonal_projection_i(const Vector_i*__v);
int vecpnorm_i(const Vector_i*__u, const int __p);
static inline int vecnorm_i(const Vector_i*__A) {
    int sum = 0;
    const size_t n = Matrix_size_i(__A);
    for (size_t i = 0; i < n; i++) {
        sum += __A->data[i] * __A->data[i];
    }
    return sqrt(sum);
}
void vecnormalize_i( Vector_i*__u);
int Vector_norm_i(const Vector_i*__u);
int Vector_pnorm_i(const Vector_i*__u, const size_t __p);
 Vector_i*Vector_normalize_i(const Vector_i*__u);
 Vector_i*ascol_i( Vector_i*__v);
 Vector_i*asrow_i( Vector_i*__v);
int Vector_distance_i(const Vector_i*__v, const Vector_i*__u);
 Vector_i*Vector_difference_i(const Vector_i*__v, const Vector_i*__u);
static inline int log_i(int x) {
    return log(x);
}
int MatIter_mean_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_sum_squared_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_mean_squared_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_rms_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_var_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_std_i(const MatIter_i __begin, const MatIter_i __end);
int MatIter_sumabs_i(const MatIter_i __begin, const MatIter_i __end);
int Vector_iter_sum_i(const Vector_i*__v);
int Vector_iter_prod_i(const Vector_i*__v);
int Vector_iter_mean_i(const Vector_i*__v);
int Vector_iter_mean_squared_i(const Vector_i*__v);
int Vector_iter_rms_i(const Vector_i*__v);
int Vector_iter_min_i(const Vector_i*__v);
int Vector_iter_max_i(const Vector_i*__v);
int Vector_iter_var_i(const Vector_i*__v);
int Vector_iter_std_i(const Vector_i*__v);
int Matrix_iter_sum_i(const Matrix_i *__m);
int Matrix_iter_prod_i(const Matrix_i *__m);
int Matrix_iter_mean_i(const Matrix_i *__m);
int Matrix_iter_mean_squared_i(const Matrix_i *__m);
int Matrix_iter_rms_i(const Matrix_i *__m);
int Matrix_iter_min_i(const Matrix_i *__m);
int Matrix_iter_max_i(const Matrix_i *__m);
int Matrix_iter_var_i(const Matrix_i *__m);
int Matrix_iter_std_i(const Matrix_i *__m);
typedef int (* mat_iter_fn_i) (const MatIter_i, const MatIter_i);
int Matrix_iterate_i(const Matrix_i *__m, mat_iter_fn_i fn);
int mean_i(const Matrix_i *__m);
int sum_i(const Matrix_i *__m);
int std_i(const Matrix_i *__m);
int var_i(const Matrix_i *__m);
int min_i(const Matrix_i *__m);
int max_i(const Matrix_i *__m);
int maxabs_i(const Matrix_i *__m);
int sumabs_i(const Matrix_i *__m);
int rms_i(const Matrix_i *__m);
int mean_squared_i(const Matrix_i *__m);
int cov_i(const Matrix_i *__x, const Matrix_i *__y);
int prod_i(const Matrix_i *__m);
int cor_i(const Matrix_i *__x, const Matrix_i *__y);
int cmoment_i(const Vector_i*__v, int __k);
int rmoment_i(const Vector_i*__v, int __k);
 Vector_i*linear_regression_i(const Vector_i*__x, const Vector_i*__y);
static inline int ejovo_log_i (const int x) {
    return log(x);
}
static inline int ejovo_fabs_i (const int x) {
    return fabs((double) x);
}
 Vector_i*loglog_regression_i(const Vector_i*__x, const Vector_i*__y);
 Vector_i*least_squares_i(const Vector_i*__x, const Vector_i*__y, int degree);
Matrix_i *runif_i(int n, int a, int b);
Matrix_i *rnorm_i(int n, int mu, int sigma);
Matrix_i *rnorm_rng_i(int n, int mu, int sigma, RNG_FN rng_fn);
Matrix_i *runif_rng_i(int n, int a, int b, RNG_FN rng_fn);
Vector_i *Vector_runif_i(size_t __n, double __a, double __b);
Vector_i *Vector_rnorm_i(size_t __n, double __mean, double __std);
Vector_i *Vector_rexp_i(size_t __n, double __rate);
int Id_i(int x);
int x_squared_i(int x);
int x_cubed_i(int x);
 Vector_i*filter_i(const Vector_i*__v, predicate_fn_i __pred);
 Vector_i*filter_if_not_i(const Vector_i*__v, predicate_fn_i __pred);
 Vector_i*filter_lt_i(const Vector_i*__v, int __cutoff);
 Vector_i*filter_lteq_i(const Vector_i*__v, int __cutoff);
 Vector_i*filter_gt_i(const Vector_i*__v, int __cutoff);
 Vector_i*filter_gteq_i(const Vector_i*__v, int __cutoff);
Matrix_i *map_i(const Matrix_i *__m, function_i fn);
Matrix_i *apply_i(Matrix_i *__m, function_i fn);
int head_i(const Matrix_i *__m);
Matrix_i *take_i(const Matrix_i *__m, int n_el);
 Vector_i*tail_i(const Matrix_i *__m);
int last_i(const Matrix_i *__m);
 Vector_i*init_i(const Matrix_i *__m);
extern int TRUE_i;
extern int FALSE_i;
typedef Matrix_i Logical_i;
typedef int (* pred_fn_i) (int);
int true_fn_i(int d);
int NOT_i(int d);
int AND_i(int a, int b);
int OR_i(int a, int b);
_Bool Matrix_is_logical_i(const Matrix_i *__log);
_Bool Vector_is_logical_i(const Vector_i*__log);
int Matrix_mask_count_i(const Matrix_i *__mask);
int Vector_mask_count_i(const Vector_i*__mask);
Matrix_i *Matrix_as_logical_i(const Matrix_i *__m, pred_fn_i __fn);
Matrix_i *Matrix_as_true_i(const Matrix_i *__m);
Logical_i *Matrix_lt_i(const Matrix_i *__m, int __k);
Logical_i *Matrix_lteq_i(const Matrix_i *__m, int __k);
Logical_i *Matrix_gt_i(const Matrix_i *__m, int __k);
Logical_i *Matrix_gteq_i(const Matrix_i *__m, int __k);
void matsetmask_i(Matrix_i *__m, const Matrix_i *__mask, int __val);
void matsetpred_i(Matrix_i *__m, pred_fn_i __predicate, int __val);
 Vector_i*Matrix_filter_mask_i(const Matrix_i *__m, const Matrix_i *__mask);
_Bool Logical_all_i(const Matrix_i *__mask);
_Bool Logical_any_i(const Matrix_i *__mask);
Logical_i *Logical_not_i(const Matrix_i *__mask);
Matrix_i *Matrix_as_index_i(const Matrix_i *__m);
 Vector_i*Matrix_scrub_index_i(const Matrix_i *__m, const Index_i *__ind);
 Vector_i*matindex_i(const Matrix_i *__m, const Index_i *__ind);
 Vector_i*Matrix_index_i(const Matrix_i *__m, const Index_i *__ind);
 Vector_i*Matrix_logical_index_i(const Matrix_i *__m, const Logical_i *__log);
Index_i *Matrix_where_i(const Matrix_i *__m, pred_fn_i __fn);
static inline Index_i *Logical_get_index_i(const Logical_i *__log) {
    Index_i *ind = Vector_new_i(Vector_mask_count_i(__log));
    MatIter_i it = Matrix_begin_i(ind);
    for (size_t i = 0; i < Matrix_size_i(__log); i++) {
        if (matget_i(__log, i) == TRUE_i) {
            MatIter_set_i(it, i);
            it = MatIter_next_i(it);
        }
    }
    return ind;
}
Index_i *Matrix_where_lt_i(const Matrix_i *__m, double __k);
Index_i *Matrix_where_lteq_i(const Matrix_i *__m, double __k);
Index_i *Matrix_where_gt_i(const Matrix_i *__m, double __k);
Index_i *Matrix_where_gteq_i(const Matrix_i *__m, double __k);
Matrix_i *matsetind_i(Matrix_i *__m, const Matrix_i *__ind, const Matrix_i *__val);
Matrix_i *Matrix_set_index_i(const Matrix_i *__m, const Matrix_i *__ind, const Matrix_i *__val);
Matrix_i *Matrix_extract_rows_i(const Matrix_i *__m, Index_i *__ind);
Matrix_i *Matrix_extract_cols_i(const Matrix_i *__m, Index_i *__ind);
 Vector_i*Matrix_scrub_col_index_i(const Matrix_i *__m, const Index_i *__ind);
 Vector_i*Matrix_scrub_row_index_i(const Matrix_i *__m, const Index_i *__ind);
static inline _Bool is_int_i(double x) {
    return x == floor(x);
}
static inline _Bool are_col_indices_valid_i(const Matrix_i *__m, const Index_i *__ind) {
    MatIter_i it = Matrix_begin_i(__ind);
    const MatIter_i end = Matrix_begin_i(__ind);
    for(; !MatIter_cmp_i(it, end); it = MatIter_next_i(it)) {
        double val = MatIter_value_i(it);
        if (val < 0 || !is_int_i(val) || val >= __m->ncols) return 0;
    }
    return 1;
}
static inline _Bool are_row_indices_valid_i(const Matrix_i *__m, const Index_i *__ind) {
    MatIter_i it = Matrix_begin_i(__ind);
    const MatIter_i end = Matrix_begin_i(__ind);
    for(; !MatIter_cmp_i(it, end); it = MatIter_next_i(it)) {
        double val = MatIter_value_i(it);
        if (val < 0 || !is_int_i(val) || val >= __m->nrows) return 0;
    }
    return 1;
}
int MatIter_max_index_i(MatIter_i begin, const MatIter_i end);
int MatIter_min_index_i(MatIter_i begin, const MatIter_i end);
int Matrix_row_min_index_i(const Matrix_i *__m, size_t __i);
int Matrix_row_max_index_i(const Matrix_i *__m, size_t __i);
int Matrix_col_min_index_i(const Matrix_i *__m, size_t __i);
int Matrix_col_max_index_i(const Matrix_i *__m, size_t __i);
int Matrix_col_max_index_from_row_i(const Matrix_i *__m, size_t __j, size_t __i);
int Matrix_col_min_index_from_row_i(const Matrix_i *__m, size_t __j, size_t __i);
int Matrix_row_max_index_from_col_i(const Matrix_i *__m, size_t __i, size_t __j);
int Matrix_row_min_index_from_col_i(const Matrix_i *__m, size_t __i, size_t __j);
Matrix_i *Matrix_runif_i(size_t __m, size_t __n, int __a, int __b);
Matrix_i *Matrix_rnorm_i(size_t __m, size_t __n, int __mean, int __std);
Matrix_i *as_stochastic_i(Matrix_i *__m);
Matrix_i *as_row_stochastic_i(Matrix_i *__m);
Matrix_i *as_col_stochastic_i(Matrix_i *__m);
Matrix_i *as_doubly_stochastic_i(Matrix_i *__m);
Matrix_i *as_doubly_stochastic_DEPRECATED_i(Matrix_i *__m);
Matrix_i *Matrix_rexp_i(size_t __m, size_t __n, double __rate);
Matrix_i *Matrix_as_stochastic_i(const Matrix_i *__m);
Matrix_i *Stochastic_runif_i(size_t __n, double __a, double __b);
Matrix_i *Stochastic_rnorm_i(size_t __n, double __mean, double __std);
Matrix_i *Stochastic_rexp_i(size_t __n, double __rate);
 Vector_i*Vector_prob_unif_i(size_t __n);
 Vector_i*compute_row_sums_i(const Matrix_i *__m);
 Vector_i*compute_col_sums_i(const Matrix_i *__m);
extern const double PI;
extern const double TWO_PI;
extern const double HALF_PI;
extern const double EPS;
typedef struct Matrix_c {
    double _Complex *data;
    size_t nrows;
    size_t ncols;
} Matrix_c;
extern Matrix_c *g_ANON_c;
typedef struct {
    double _Complex *ptr;
    size_t ncols;
} ColIter_c;
typedef struct {
    double _Complex *ptr;
    size_t ptr_diff;
} RowIter_c;
typedef struct {
    double _Complex *ptr;
    size_t ptr_diff;
} MatIter_c;
typedef Matrix_c Vector_c;
typedef void (* EDITOR_c) (double _Complex *);
typedef void (* EDITOR_2_c) (double _Complex *, double _Complex *);
typedef void (* EDITOR_K_c) (double _Complex *, double _Complex);
typedef _Bool (* Mask_c) (double _Complex *);
typedef struct {
    Matrix_c *L;
    Matrix_c *U;
} LU_c;
typedef struct {
    Matrix_c *L;
    Matrix_c *U;
    Vector_c*P;
} LUP_c;
typedef struct {
    Matrix_c *L;
    Matrix_c *D;
    Vector_c*U;
} LDU_c;
typedef void (* MatIterFn_c) (MatIter_c);
typedef void (* MatIterFn_k_c) (MatIter_c, double _Complex);
typedef void (* MatIterFn_ptr_c) (MatIter_c, const double _Complex *);
typedef void (* MatIterFn_iter_c) (MatIter_c, MatIter_c);
typedef void (* MatIterFn_iter_k_c) (MatIter_c, MatIter_c, const double _Complex);
typedef void (* ColIterFn_c) (ColIter_c *);
typedef void (* ColIterFn_k_c) (ColIter_c*, double _Complex);
typedef void (* ColIterFn_ptr_c) (ColIter_c*, const double _Complex *);
typedef void (* ColIterFn_iter_c) (ColIter_c*, ColIter_c*);
typedef void (* RowIterFn_c) (RowIter_c*);
typedef void (* RowIterFn_k_c) (RowIter_c*, double _Complex);
typedef void (* RowIterFn_ptr_c) (RowIter_c*, const double _Complex *);
typedef void (* RowIterFn_iter_c) (RowIter_c*, RowIter_c*);
typedef void (* RowIterFn_iter_k_c) (RowIter_c*, RowIter_c*, const double _Complex);
typedef double _Complex (* function_c) (double _Complex);
typedef _Bool (* predicate_fn_c) (double _Complex);
typedef Matrix_c Index_c;
static inline Matrix_c *matalloc_c(size_t __nrows, size_t __ncols) {
    Matrix_c *x = (Matrix_c *) malloc(sizeof(Matrix_c));
    double _Complex *data = (double _Complex *) malloc(sizeof(double _Complex) * (__nrows * __ncols));
    x->data = data;
    x->nrows = __nrows;
    x->ncols = __ncols;
    return x;
}
Matrix_c *matvec_c(double k);
Matrix_c *matanon_c(int __count, ...);
static inline void matfree_c(Matrix_c *__A) {
    free(__A->data);
    free(__A);
}
static inline void Matrix_free_c(Matrix_c *__A) {
    if (__A) {
        if (__A->data) free(__A->data);
        free(__A);
    }
}
static inline void Matrix_reset_c(Matrix_c **__A_ptr) {
    if (*__A_ptr) {
        if ((*__A_ptr)->data) free((*__A_ptr)->data);
        free (*__A_ptr);
    }
    *__A_ptr = ((void *)0);
}
Matrix_c *Matrix_renew_c(Matrix_c *A, int m, int n);
static inline _Bool matcpy_c(Matrix_c *restrict __dest, const Matrix_c *restrict __src) {
    memcpy(__dest->data, __src->data, sizeof(double _Complex)*(__src->nrows * __src->ncols));
    __dest->ncols = __src->ncols;
    __dest->nrows = __src->nrows;
    if(__dest && __src && __dest->data) {
        return 1;
    } else {
        return 0;
    }
}
Matrix_c * matclone_c(const Matrix_c *restrict __src);
Matrix_c *Matrix_catch_c(Matrix_c **__lhs_ptr, Matrix_c *__anon_rhs);
Matrix_c *Matrix_anon_c(Matrix_c *__anon_rhs);
void Matrix_anon_free_c();
Matrix_c *Matrix_transpose_c(const Matrix_c *m);
Matrix_c *Matrix_shallow_copy_c(const Matrix_c *rhs);
Matrix_c *Matrix_take_c(Matrix_c *rhs);
Matrix_c * Matrix_new_c(int nrows, int ncols);
Matrix_c *Matrix_move_c(double _Complex **arr_ptr, size_t nrows, size_t ncols);
Matrix_c *Matrix_from_c(const double _Complex *arr, size_t nrows, size_t ncols);
Matrix_c *Matrix_colvec_c(const double _Complex *arr, size_t nrows);
Matrix_c *Matrix_rowvec_c(const double _Complex *arr, size_t ncols);
Matrix_c * Matrix_clone_c(const Matrix_c *restrict src);
Matrix_c * Matrix_ones_c(size_t nrows, size_t ncols);
Matrix_c * Matrix_ij_c(size_t nrows, size_t ncols);
 Vector_c*linspace_c(double _Complex start, double _Complex end, int N);
 Vector_c*range_c(int start, int end, int diff);
double _Complex raisedBy10_c(double _Complex input);
 Vector_c*logspace_c(double start, double end, int n);
 Vector_c*Vector_linspace_c(double _Complex start, double _Complex end, int N);
 Vector_c*Vector_range_c(double start, int end, int diff);
Matrix_c *Matrix_diagonal_c(size_t n);
Matrix_c *Matrix_tridiagonal_c(size_t n);
Matrix_c * Matrix_value_c(size_t nrows, size_t ncols, double _Complex value);
Matrix_c * Matrix_random_c(size_t nrows, size_t ncols, int min, int max);
Matrix_c * Matrix_rand_c(size_t nrows, size_t ncols);
Matrix_c * Matrix_identity_c(size_t n);
void matprint_c(const Matrix_c *m);
void Matrix_print_c(const Matrix_c *m);
void Vector_print_head_c(const Matrix_c *m, int n);
void Matrix_print_iter_c(const Matrix_c *m);
void Matrix_summary_c(const Matrix_c *m);
void Matrix_print_all_digits_c(const Matrix_c *m);
void Matrix_print_fixed_c(const Matrix_c *m);
Matrix_c *Matrix_id_c(size_t m, size_t n);
static inline void print_el_c(const double _Complex el) {
    printf("(%4.4lf, %4.4lf) ", creal(el), cimag(el));
}
static inline void print_el_end_c(const double _Complex el) {
    printf("(%4.4lf, %4.4lf)}\n", creal(el), cimag(el));
}
Matrix_c *Matrix_K_c(size_t __n);
Matrix_c *Matrix_C_c(size_t __n);
Matrix_c *Matrix_T_c(size_t __n);
Matrix_c *Matrix_B_c(size_t __n);
static inline void add_each_c(double _Complex *__a, double _Complex *__b) {
    (*__a) += (*__b);
}
static inline void sub_each_c(double _Complex *__a, double _Complex *__b) {
    (*__a) -= (*__b);
}
static inline void mult_each_c(double _Complex *__a, double _Complex *__b) {
    (*__a) *= (*__b);
}
static inline void div_each_c(double _Complex *__a, double _Complex *__b) {
    (*__a) /= (*__b);
}
static inline void multscalar_c(double _Complex *__el, double _Complex __k) {
    (*__el) *= __k;
}
static inline void addscalar_c(double _Complex *__el, double _Complex __k) {
    (*__el) += __k;
}
static inline void divscalar_c(double _Complex *__el, double _Complex __k) {
    (*__el) /= __k;
}
static inline void subscalar_c(double _Complex *__el, double _Complex __k) {
    (*__el) -= __k;
}
void Matrix_foreach_c(Matrix_c *__A, EDITOR_c __fnc);
void Matrix_foreach_2_c(Matrix_c *__A, const Matrix_c *__B, EDITOR_2_c __fnc);
void Matrix_foreach_k_c(Matrix_c *__A, EDITOR_K_c __fnc, double _Complex __k);
void matadd_foreach_c(Matrix_c *__A, const Matrix_c *__B);
void matsub_foreach_c(Matrix_c *__A, const Matrix_c *__B);
void matmult_foreach_c(Matrix_c *__A, const Matrix_c *__B);
void matdiv_foreach_c(Matrix_c *__A, const Matrix_c *__B);
void matmultscalar_c(Matrix_c *__A, const double _Complex __k);
void mataddscalar_c(Matrix_c *__A, const double _Complex __k);
void matdivscalar_c(Matrix_c *__A, const double _Complex __k);
void matsubscalar_c(Matrix_c *__A, const double _Complex __k);
double _Complex matsum_c(const Matrix_c *__A);
double _Complex matmin_c(const Matrix_c *__A);
double _Complex matmax_c(const Matrix_c *__A);
Matrix_c *Matrix_mult_scalar_c(const Matrix_c *__A, const double _Complex __k);
Matrix_c *Matrix_add_scalar_c(const Matrix_c *__A, const double _Complex __k);
Matrix_c *Matrix_sub_scalar_c(const Matrix_c *__A, const double _Complex __k);
Matrix_c *Matrix_div_scalar_c(const Matrix_c *__A, const double _Complex __k);
void Matrix_mask_c(Matrix_c *__A, Mask_c __mask, EDITOR_c __operator);
void Matrix_mask_2_c(Matrix_c *__A, Matrix_c *__B, Mask_c __mask, EDITOR_2_c __operator);
void Matrix_mask_k_c(Matrix_c *__A, Mask_c __mask, EDITOR_K_c __operator, const double _Complex __k);
static inline _Bool Matrix_valid_bounds_c(const Matrix_c *__m, size_t __i, size_t __j) {
    return (__i < __m->nrows && __j < __m->ncols);
}
_Bool matcmp_c(const Matrix_c *__A, const Matrix_c *__B);
_Bool matcmp_bytes_c(const Matrix_c *__A, const Matrix_c *__B);
_Bool Matrix_comp_add_c(const Matrix_c *__A, const Matrix_c *__B);
_Bool Matrix_comp_mult_c(const Matrix_c *__A, const Matrix_c *__B);
static inline size_t Matrix_size_c(const Matrix_c *__A) {
    return __A->nrows * __A->ncols;
}
_Bool Matrix_is_square_c(const Matrix_c *__A);
_Bool Matrix_is_row_c(const Matrix_c *__A);
_Bool Matrix_is_col_c(const Matrix_c *__A);
_Bool Matrix_is_vec_c(const Matrix_c *__A);
size_t Matrix_rect_limit_c(const Matrix_c *__A);
static inline Matrix_c *reshape_c(Matrix_c *__m, size_t __nrow, size_t __ncol) {
    __m->nrows = __nrow;
    __m->ncols = __ncol;
    return __m;
}
static inline double _Complex matget_c(const Matrix_c *__m, size_t __i) {
    return __m->data[__i];
}
static inline void matset_c(Matrix_c *__m, size_t __i, size_t __j, double _Complex __value) {
    __m->data[__i * __m->ncols + __j] = __value;
}
static inline double _Complex matat_c(const Matrix_c *__m, size_t __i, size_t __j) {
    return __m->data[__i * __m->ncols + __j];
}
static inline double _Complex *matacc_c(const Matrix_c *__m, size_t __i, size_t __j) {
    return __m->data + (__i * __m->ncols + __j);
}
static inline void setelement_c(double _Complex *__el, const double _Complex __value) {
    *__el = __value;
}
static inline void matswap_c(double _Complex *__a, double _Complex *__b) {
    double _Complex temp = *__a;
    *(__a) = *(__b);
    *(__b) = temp;
}
static inline double _Complex Matrix_first_c(const Matrix_c *__m) {
    return matat_c(__m, 0, 0);
}
static inline double _Complex Matrix_last_c(const Matrix_c *__m) {
    return matat_c(__m, __m->nrows - 1, __m->ncols - 1);
}
static inline MatIter_c Matrix_begin_c(const Matrix_c *__m) {
    MatIter_c b = {.ptr = __m->data, .ptr_diff = 1};
    return b;
}
static inline MatIter_c Matrix_end_c(const Matrix_c *__m) {
    MatIter_c e = {.ptr = matacc_c(__m, __m->nrows - 1, __m->ncols), .ptr_diff = 1};
    return e;
}
static inline int Matrix_set_c(Matrix_c * __m, size_t __i, size_t __j, double _Complex __value) {
    if (Matrix_valid_bounds_c(__m, __i, __j)) {
        __m->data[__i*__m->ncols + __j] = __value;
        return 0;
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (set)\n");
        return 1;
    }
}
static inline double _Complex *matacc_check_c(const Matrix_c *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_c(__m, __i, __j)) {
        return __m->data + (__i*__m->ncols + __j);
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (access)\n");
        return ((void *)0);
    }
}
static inline double _Complex *Matrix_access_c(const Matrix_c * __m, size_t __i, size_t __j) {
    return matacc_check_c(__m, __i, __j);
}
static inline double _Complex Matrix_at_c(const Matrix_c *__m, size_t __i, size_t __j) {
    if (Matrix_valid_bounds_c(__m, __i, __j)) {
        return __m->data[__i * __m->ncols + __j];
    } else {
        fprintf(stderr, "**WARNING** Trying to access array element out of bounds. (at)\n");
        return -1;
    }
}
static inline void matcpyele_unsafe_c(Matrix_c *__dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_c *__src) {
    for (size_t i = __istart, irow = 0; i <= __iend; i++, irow++) {
        for (size_t j = __jstart, jcol = 0; j <= __jend; j++, jcol++) {
            Matrix_set_c(__dest, i, j, Matrix_at_c(__src, irow, jcol));
        }
    }
}
static inline int matcpyele_c(Matrix_c * __dest, size_t __istart, size_t __iend, size_t __jstart, size_t __jend, const Matrix_c * __src) {
    if (__iend < __istart || __jend < __jstart || __iend >= __dest->nrows || __jend >= __dest->ncols) {
        perror("Selected submatrix is not contained within Parent Matrix\n");
        return -1;
    }
    if (__src->nrows != (__iend - __istart + 1) || __src->ncols != (__jend - __jstart + 1)) {
        perror("Selected submatrix not the same size as the src matrix to copy\n");
        return -2;
    }
    matcpyele_unsafe_c(__dest, __istart, __iend, __jstart, __jend, __src);
    return 0;
}
static inline void matsetrow_c(Matrix_c *__A, size_t __i, size_t __j, const double _Complex *__src, size_t __n) {
    double _Complex *row_start = matacc_c(__A, __i, __j);
    memcpy((void *) row_start, (void *) __src, sizeof(double _Complex) * __n);
}
static inline void matsetcol_c(Matrix_c *__A, size_t __i, size_t __j, const double _Complex *__src, size_t __n) {
    double _Complex *col_start = matacc_c(__A, __i, __j);
    for (size_t i = 0; i < __n; i++) {
        *(col_start + (__A->nrows * i)) = __src[i];
    }
}
void matsetrow_mult_k_c(MatIter_c __r, const MatIter_c __row_end, double _Complex __k);
void matsetrow_div_k_c(MatIter_c __r, const MatIter_c __row_end, double _Complex __k);
void matsetrow_add_k_c(MatIter_c __r, const MatIter_c __row_end, double _Complex __k);
void matsetrow_sub_k_c(MatIter_c __r, const MatIter_c __row_end, double _Complex __k);
int Matrix_mult_row_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_div_row_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_add_row_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_sub_row_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
void matsetcol_mult_k_c(MatIter_c __c, const MatIter_c __col_end, double _Complex __k);
void matsetcol_div_k_c(MatIter_c __c, const MatIter_c __col_end, double _Complex __k);
void matsetcol_add_k_c(MatIter_c __c, const MatIter_c __col_end, double _Complex __k);
void matsetcol_sub_k_c(MatIter_c __c, const MatIter_c __col_end, double _Complex __k);
int Matrix_mult_col_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_div_col_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_add_col_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_sub_col_k_c(Matrix_c *__A, const size_t __i, const double _Complex __k);
int Matrix_set_row_c(Matrix_c *__A, size_t __i, const Matrix_c *__cow);
int Matrix_set_col_c(Matrix_c *__A, size_t __j, const Matrix_c *__col);
Matrix_c *Matrix_get_col_c(const Matrix_c *__A, size_t __j);
Matrix_c *Matrix_get_row_c(const Matrix_c *__A, size_t __i);
Matrix_c * submat_c(const Matrix_c * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_c * Matrix_submat_c(const Matrix_c * __A, size_t __istart, size_t __iend, size_t __jstart, size_t __jend);
Matrix_c * Matrix_minor_c(const Matrix_c * __A, size_t __irow, size_t __icol);
void matfill_c(Matrix_c *__A, const double _Complex __value);
void Matrix_fill_c(Matrix_c * __A, const double _Complex value);
void Matrix_fill_mask_c(Matrix_c *__A, Mask_c __mask, const double _Complex __value);
Matrix_c *Matrix_rcat_c(const Matrix_c *__A, const Matrix_c *__B);
Matrix_c *Matrix_ccat_c(const Matrix_c *__A, const Matrix_c *__B);
MatIter_c matdiagbegin_c(const Matrix_c *__m, const int __d);
MatIter_c matdiagend_c(const Matrix_c *__m, const int __d);
void MatIter_print_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex Iter_dot_c(const MatIter_c __r, const MatIter_c __rend, const MatIter_c __c);
void Matrix_print_row_c(const Matrix_c *__A, size_t __i);
void Matrix_print_col_c(const Matrix_c *__A, size_t __j);
void Matrix_print_diag_c(const Matrix_c *__A, size_t __d);
void matrowop_add_c(Matrix_c *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void matrowop_add_scaled_c(Matrix_c *__A, const size_t __r1, const size_t __r2, const double _Complex __k, const size_t __col_offset);
void Matrix_rowop_add_c(Matrix_c *__A, const size_t __r1, const size_t __r2);
void Matrix_rowop_add_offset_c(Matrix_c *__A, const size_t __r1, const size_t __r2, const size_t __col_offset);
void Matrix_rowop_add_scaled_c(Matrix_c *__A, const size_t __r1, const size_t __r2, const double _Complex __k);
double _Complex Matrix_row_min_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_row_max_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_col_min_c(const Matrix_c *__A, const size_t __j);
double _Complex Matrix_col_max_c(const Matrix_c *__A, const size_t __j);
double _Complex Matrix_diag_min_c(const Matrix_c *__A, const size_t __j);
double _Complex Matrix_diag_max_c(const Matrix_c *__A, const size_t __j);
double _Complex Matrix_row_prod_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_col_prod_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_diag_prod_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_row_sum_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_col_sum_c(const Matrix_c *__A, const size_t __i);
double _Complex Matrix_diag_sum_c(const Matrix_c *__A, const size_t __i);
MatIter_c matcolpos_c(const Matrix_c *__A, size_t __i, size_t __j);
MatIter_c Matrix_col_end_c(const Matrix_c *__A, size_t __j);
MatIter_c Matrix_col_begin_c(const Matrix_c *__A, size_t __j);
MatIter_c matcolbegin_c(const Matrix_c *__A, size_t __i);
MatIter_c matcolend_c(const Matrix_c *__A, size_t __i);
MatIter_c matrowpos_c(const Matrix_c *__A, size_t __i, size_t __j);
MatIter_c matrowbegin_c(const Matrix_c *__A, size_t __i);
MatIter_c matrowend_c(const Matrix_c *__A, size_t __i);
MatIter_c Matrix_row_end_c(const Matrix_c *__A, size_t __i);
MatIter_c Matrix_row_begin_c(const Matrix_c *__A, size_t __i);
static inline MatIter_c MatIter_new_c(double _Complex *__ptr, size_t __ptr_diff) {
    MatIter_c c = {.ptr = __ptr, .ptr_diff = __ptr_diff};
    return c;
}
static inline MatIter_c MatIter_null_c() {
    MatIter_c null = {.ptr = ((void *)0), .ptr_diff = 0};
    return null;
}
static inline _Bool MatIter_is_null_c(MatIter_c __i) {
    return __i.ptr == ((void *)0);
}
static inline MatIter_c MatIter_next_c(MatIter_c __c) {
    MatIter_c next = {.ptr = __c.ptr += __c.ptr_diff, .ptr_diff = __c.ptr_diff};
    return next;
}
static inline _Bool MatIter_cmp_c(const MatIter_c __lhs, const MatIter_c __rhs) {
    return __lhs.ptr == __rhs.ptr;
}
static inline double _Complex MatIter_value_c(const MatIter_c __c) {
    return *(__c.ptr);
}
static inline size_t MatIter_length_c(const MatIter_c begin, const MatIter_c end) {
    size_t diff = end.ptr - begin.ptr;
    return diff / begin.ptr_diff;
}
double _Complex MatIter_sum_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_prod_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_max_c(MatIter_c __a, const MatIter_c __b);
double _Complex MatIter_min_c(MatIter_c __a, const MatIter_c __b);
void MatIter_set_c(MatIter_c __r, const double _Complex __k);
void MatIter_add_k_c(MatIter_c __r, const double _Complex __k);
void MatIter_sub_k_c(MatIter_c __r, const double _Complex __k);
void MatIter_mult_k_c(MatIter_c __r, const double _Complex __k);
void MatIter_div_k_c(MatIter_c __r, const double _Complex __k);
void MatIter_set_ptr_c(MatIter_c __r, const double _Complex *__ptr);
void MatIter_add_ptr_c(MatIter_c __r, const double _Complex *__ptr);
void MatIter_sub_ptr_c(MatIter_c __r, const double _Complex *__ptr);
void MatIter_mult_ptr_c(MatIter_c __r, const double _Complex *__ptr);
void MatIter_div_ptr_c(MatIter_c __r, const double _Complex *__ptr);
void MatIter_set_iter_c(MatIter_c __a, const MatIter_c __b);
void MatIter_set_iter_pow_c(MatIter_c __a, const MatIter_c __b, double _Complex __n);
void MatIter_add_iter_c(MatIter_c __a, const MatIter_c __b);
void MatIter_add_iter_scaled_c(MatIter_c __a, const MatIter_c __b, const double _Complex __k);
void MatIter_sub_iter_c(MatIter_c __a, const MatIter_c __b);
void MatIter_mult_iter_c(MatIter_c __a, const MatIter_c __b);
void MatIter_div_iter_c(MatIter_c __a, const MatIter_c __b);
void MatIter_row_set_k_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_row_set_iter_c(const MatIter_c __rbegin, const MatIter_c __rend, const MatIter_c __bbegin);
void MatIter_row_add_k_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_row_sub_k_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_row_mult_k_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_row_div_k_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_row_add_row_c(const MatIter_c __abegin, const MatIter_c __aend, const MatIter_c __bbegin);
void MatIter_apply_c(const MatIter_c __rbegin, const MatIter_c __rend, MatIterFn_c __fn);
void MatIter_apply_k_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k, MatIterFn_k_c __fn_k);
void MatIter_apply_ptr_c(const MatIter_c __rbegin, const MatIter_c __rend, const double _Complex *__ptr, MatIterFn_ptr_c __fn_ptr);
void MatIter_apply_iter_c(const MatIter_c __abegin, const MatIter_c __aend, const MatIter_c __bbegin, MatIterFn_iter_c __fn_iter);
void MatIter_apply_iter_scaled_c(const MatIter_c __abegin, const MatIter_c __aend, const MatIter_c __bbegin, const double _Complex __k, MatIterFn_iter_k_c __fn_iter_k);
void MatIter_apply_set_k_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_apply_add_k_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_apply_sub_k_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_apply_mult_k_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_apply_div_k_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex __k);
void MatIter_apply_set_ptr_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex *__ptr);
void MatIter_apply_add_ptr_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex *__ptr);
void MatIter_apply_sub_ptr_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex *__ptr);
void MatIter_apply_mult_ptr_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex *__ptr);
void MatIter_apply_div_ptr_c(MatIter_c __rbegin, const MatIter_c __rend, const double _Complex *__ptr);
void MatIter_apply_set_iter_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin);
void MatIter_apply_set_iter_pow_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin, double __n);
void MatIter_apply_add_iter_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin);
void MatIter_apply_sub_iter_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin);
void MatIter_apply_mult_iter_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin);
void MatIter_apply_div_iter_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin);
void MatIter_apply_add_iter_scaled_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin, const double _Complex __k);
Matrix_c *Matrix_set_col_iter_c(Matrix_c *__m, size_t __j, MatIter_c __source);
Matrix_c *Matrix_set_row_iter_c(Matrix_c *__m, size_t __i, MatIter_c __source);
MatIter_c Matrix_row_begin_from_col_c(const Matrix_c *__A, size_t __i, size_t __j);
MatIter_c Matrix_col_begin_from_row_c(const Matrix_c *__A, size_t __j, size_t __i);
MatIter_c Matrix_diag_end_c(const Matrix_c *__m, const int __d);
MatIter_c Matrix_diag_begin_c(const Matrix_c *__m, const int __d);
 Vector_c*MatIter_difference_c(MatIter_c __abegin, const MatIter_c __aend, MatIter_c __bbegin);
Matrix_c *Matrix_pow_c(Matrix_c * __A, size_t __power);
double Matrix_det_c(const Matrix_c * __A);
double _Complex matcdr_check_c(const Matrix_c *__A, const Matrix_c *__B, size_t __irow, size_t __icol);
static inline double _Complex matcdr_c(const Matrix_c *__A, const Matrix_c *__B, size_t __irow, size_t __icol) {
        double _Complex inner_product = 0;
        for (size_t i = 0; i < __A->ncols; i++) {
            inner_product += (matat_c(__A, __irow, i) * matat_c(__B, i, __icol));
        }
        return inner_product;
}
static inline Matrix_c *matmul_c(const Matrix_c *__A, const Matrix_c *__B) {
    Matrix_c *product = Matrix_new_c(__A->nrows, __B->ncols);
    if (product){
        for (size_t i = 0; i < __A->nrows; i++) {
            for (size_t j = 0; j < __B->ncols; j++) {
                matset_c(product, i, j, matcdr_c(__A, __B, i, j));
            }
        }
    }
    return product;
}
Matrix_c * Matrix_multiply_c(const Matrix_c *__A, const Matrix_c *__B);
void matadd_c(Matrix_c *__A, const Matrix_c *__B);
Matrix_c *Matrix_add_c(const Matrix_c *__A, const Matrix_c *__B);
void mathad_c(Matrix_c *__A, const Matrix_c *__B);
void mathad_check_c(Matrix_c *__A, const Matrix_c *__B);
void mathadexp_c(Matrix_c *__A, int __k);
Matrix_c *Matrix_hadamard_c(const Matrix_c *__A, const Matrix_c *__B);
void matsub_c(Matrix_c *__A, const Matrix_c *__B);
Matrix_c *Matrix_subtract_c(const Matrix_c *__A, const Matrix_c *__B);
double _Complex colnorm_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex Matrix_col_norm_c(const Matrix_c *__A, size_t __j);
void matnormcol_c(const MatIter_c __begin, const MatIter_c __end);
void matnormcols_c(Matrix_c *__A);
void Matrix_normalize_col_c(Matrix_c *__A, size_t __j);
void Matrix_normalize_cols_c(Matrix_c *__A);
double _Complex Matrix_frobenius_c(const Matrix_c *__A);
Matrix_c *matlu_nopivot_c(Matrix_c *__A);
LU_c Matrix_lu_c(const Matrix_c *__A);
Matrix_c *Matrix_solve_lu_c(const Matrix_c *__A, const Vector_c*__b);
Matrix_c *gausselim_c(const Matrix_c *__A, const Matrix_c *__B);
Matrix_c *Matrix_inverse_c(const Matrix_c *__A);
 Vector_c*jacobi_iteration_c(const Matrix_c *__A, const Vector_c*__b, const Vector_c*__x0, double _Complex __crit);
Matrix_c *Matrix_vandermonde_c(const Vector_c*__v);
Matrix_c *Matrix_vandermonde_reduced_c(const Vector_c*__v, size_t __degree);
void Row_switch_c(Index_c *__ind, size_t __r1, size_t __r2);
void Row_multiply_c(Matrix_c *__m, Index_c *__ind, size_t __r, double __k);
void Row_addition_c(Matrix_c *__m, Index_c *__ind, size_t __r1, size_t __r2);
void Row_addition_k_c(Matrix_c *__m, Index_c *__ind, size_t __r1, size_t __r2, double __k);
 Vector_c*vector_c(int __count, ...);
 Vector_c*Vector_new_c(size_t __nrows);
 Vector_c*Vector_ones_c(size_t __nrows);
 Vector_c*Vector_from_iter_c(MatIter_c __begin, MatIter_c __end);
 Vector_c*Vector_rand_c(size_t __nrows);
 Vector_c*Vector_random_c(size_t __nrows, int __min, int __max);
 Vector_c*Vector_from_c(const double _Complex* __arr, size_t __nrows);
 Vector_c*Vector_clone_c(const Vector_c*__v);
 Vector_c*Vector_from_matrix_c(const Matrix_c *__m);
 Vector_c*Vector_as_col_c(const Vector_c*__v);
 Vector_c*Vector_as_row_c(const Vector_c*__v);
void Vector_free_c( Vector_c*__v);
void Vector_reset_c( Vector_c**__v);
 Vector_c*Matrix_as_col_c(const Matrix_c *__m);
 Vector_c*Matrix_as_row_c(const Matrix_c *__m);
size_t Vector_size_c(const Vector_c*__v);
void Vector_set_c( Vector_c*__v, size_t __pos, double _Complex __val);
void Vector_set_first_c( Vector_c*__v, double _Complex __val);
void Vector_set_last_c( Vector_c*__v, double _Complex __val);
double _Complex Vector_first_c(const Vector_c*__v);
double _Complex Vector_last_c(const Vector_c*__v);
MatIter_c Vector_begin_c(const Vector_c*__v);
MatIter_c Vector_end_c(const Vector_c*__v);
MatIter_c Vector_iter_c(const Vector_c*__v, size_t i);
double _Complex Vector_max_c(const Vector_c*__v);
double _Complex Vector_at_c(const Vector_c*__v, size_t __i);
static inline double _Complex vecat_c(const Vector_c*__v, size_t i) {
    return __v->data[i];
}
static inline double _Complex *vecacc_c(const Vector_c*__v, size_t i) {
    return &__v->data[i];
}
static inline void vecset_c(const Vector_c*__v, size_t i, double _Complex k) {
    __v->data[i] = k;
}
static inline double _Complex *vecptr_c(const Vector_c*__v, size_t i) {
    return &__v->data[i];
}
double _Complex *Vector_access_c(const Vector_c*__v, size_t __i);
 Vector_c*Vector_map_c(const Vector_c*__v, function_c __fn);
double _Complex Vector_sum_c(const Vector_c*__v);
void Vector_print_as_row_c(const Vector_c*__v);
double _Complex vecdot_c(const Vector_c*__u, const Vector_c*__v);
double _Complex Vector_inner_c(const Vector_c*__u, const Vector_c*__v);
 Vector_c*vecproject_c(const Vector_c*__v, const Vector_c*__u);
 Vector_c*Vector_project_onto_c(const Vector_c*__v, const Vector_c*__u);
double _Complex Vector_dot_c(const Vector_c*__u, const Vector_c*__v);
 Vector_c*Vector_hadamard_c(const Vector_c*__u, const Vector_c*__v);
Matrix_c *Vector_outer_c(const Vector_c*__u, const Vector_c*__v);
Matrix_c *Vector_orthogonal_projection_c(const Vector_c*__v);
double _Complex vecpnorm_c(const Vector_c*__u, const int __p);
static inline double _Complex vecnorm_c(const Vector_c*__A) {
    double _Complex sum = 0;
    const size_t n = Matrix_size_c(__A);
    for (size_t i = 0; i < n; i++) {
        sum += __A->data[i] * __A->data[i];
    }
    return sqrt(sum);
}
void vecnormalize_c( Vector_c*__u);
double _Complex Vector_norm_c(const Vector_c*__u);
double _Complex Vector_pnorm_c(const Vector_c*__u, const size_t __p);
 Vector_c*Vector_normalize_c(const Vector_c*__u);
 Vector_c*ascol_c( Vector_c*__v);
 Vector_c*asrow_c( Vector_c*__v);
double _Complex Vector_distance_c(const Vector_c*__v, const Vector_c*__u);
 Vector_c*Vector_difference_c(const Vector_c*__v, const Vector_c*__u);
static inline double _Complex log_c(double _Complex x) {
    return log(x);
}
double _Complex MatIter_mean_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_sum_squared_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_mean_squared_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_rms_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_var_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_std_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex MatIter_sumabs_c(const MatIter_c __begin, const MatIter_c __end);
double _Complex Vector_iter_sum_c(const Vector_c*__v);
double _Complex Vector_iter_prod_c(const Vector_c*__v);
double _Complex Vector_iter_mean_c(const Vector_c*__v);
double _Complex Vector_iter_mean_squared_c(const Vector_c*__v);
double _Complex Vector_iter_rms_c(const Vector_c*__v);
double _Complex Vector_iter_min_c(const Vector_c*__v);
double _Complex Vector_iter_max_c(const Vector_c*__v);
double _Complex Vector_iter_var_c(const Vector_c*__v);
double _Complex Vector_iter_std_c(const Vector_c*__v);
double _Complex Matrix_iter_sum_c(const Matrix_c *__m);
double _Complex Matrix_iter_prod_c(const Matrix_c *__m);
double _Complex Matrix_iter_mean_c(const Matrix_c *__m);
double _Complex Matrix_iter_mean_squared_c(const Matrix_c *__m);
double _Complex Matrix_iter_rms_c(const Matrix_c *__m);
double _Complex Matrix_iter_min_c(const Matrix_c *__m);
double _Complex Matrix_iter_max_c(const Matrix_c *__m);
double _Complex Matrix_iter_var_c(const Matrix_c *__m);
double _Complex Matrix_iter_std_c(const Matrix_c *__m);
typedef double _Complex (* mat_iter_fn_c) (const MatIter_c, const MatIter_c);
double _Complex Matrix_iterate_c(const Matrix_c *__m, mat_iter_fn_c fn);
double _Complex mean_c(const Matrix_c *__m);
double _Complex sum_c(const Matrix_c *__m);
double _Complex std_c(const Matrix_c *__m);
double _Complex var_c(const Matrix_c *__m);
double _Complex min_c(const Matrix_c *__m);
double _Complex max_c(const Matrix_c *__m);
double _Complex maxabs_c(const Matrix_c *__m);
double _Complex sumabs_c(const Matrix_c *__m);
double _Complex rms_c(const Matrix_c *__m);
double _Complex mean_squared_c(const Matrix_c *__m);
double _Complex cov_c(const Matrix_c *__x, const Matrix_c *__y);
double _Complex prod_c(const Matrix_c *__m);
double _Complex cor_c(const Matrix_c *__x, const Matrix_c *__y);
double _Complex cmoment_c(const Vector_c*__v, int __k);
double _Complex rmoment_c(const Vector_c*__v, int __k);
 Vector_c*linear_regression_c(const Vector_c*__x, const Vector_c*__y);
static inline double _Complex ejovo_log_c (const double _Complex x) {
    return log(x);
}
static inline double _Complex ejovo_fabs_c (const double _Complex x) {
    return fabs((double) x);
}
 Vector_c*loglog_regression_c(const Vector_c*__x, const Vector_c*__y);
 Vector_c*least_squares_c(const Vector_c*__x, const Vector_c*__y, int degree);
Matrix_c *runif_c(int n, double _Complex a, double _Complex b);
Matrix_c *rnorm_c(int n, double _Complex mu, double _Complex sigma);
Matrix_c *rnorm_rng_c(int n, double _Complex mu, double _Complex sigma, RNG_FN rng_fn);
Matrix_c *runif_rng_c(int n, double _Complex a, double _Complex b, RNG_FN rng_fn);
Vector_c *Vector_runif_c(size_t __n, double __a, double __b);
Vector_c *Vector_rnorm_c(size_t __n, double __mean, double __std);
Vector_c *Vector_rexp_c(size_t __n, double __rate);
double _Complex Id_c(double _Complex x);
double _Complex x_squared_c(double _Complex x);
double _Complex x_cubed_c(double _Complex x);
 Vector_c*filter_c(const Vector_c*__v, predicate_fn_c __pred);
 Vector_c*filter_if_not_c(const Vector_c*__v, predicate_fn_c __pred);
 Vector_c*filter_lt_c(const Vector_c*__v, double _Complex __cutoff);
 Vector_c*filter_lteq_c(const Vector_c*__v, double _Complex __cutoff);
 Vector_c*filter_gt_c(const Vector_c*__v, double _Complex __cutoff);
 Vector_c*filter_gteq_c(const Vector_c*__v, double _Complex __cutoff);
Matrix_c *map_c(const Matrix_c *__m, function_c fn);
Matrix_c *apply_c(Matrix_c *__m, function_c fn);
double _Complex head_c(const Matrix_c *__m);
Matrix_c *take_c(const Matrix_c *__m, int n_el);
 Vector_c*tail_c(const Matrix_c *__m);
double _Complex last_c(const Matrix_c *__m);
 Vector_c*init_c(const Matrix_c *__m);
extern double _Complex TRUE_c;
extern double _Complex FALSE_c;
typedef Matrix_c Logical_c;
typedef double _Complex (* pred_fn_c) (double _Complex);
double _Complex true_fn_c(double _Complex d);
double _Complex NOT_c(double _Complex d);
double _Complex AND_c(double _Complex a, double _Complex b);
double _Complex OR_c(double _Complex a, double _Complex b);
_Bool Matrix_is_logical_c(const Matrix_c *__log);
_Bool Vector_is_logical_c(const Vector_c*__log);
int Matrix_mask_count_c(const Matrix_c *__mask);
int Vector_mask_count_c(const Vector_c*__mask);
Matrix_c *Matrix_as_logical_c(const Matrix_c *__m, pred_fn_c __fn);
Matrix_c *Matrix_as_true_c(const Matrix_c *__m);
Logical_c *Matrix_lt_c(const Matrix_c *__m, double _Complex __k);
Logical_c *Matrix_lteq_c(const Matrix_c *__m, double _Complex __k);
Logical_c *Matrix_gt_c(const Matrix_c *__m, double _Complex __k);
Logical_c *Matrix_gteq_c(const Matrix_c *__m, double _Complex __k);
void matsetmask_c(Matrix_c *__m, const Matrix_c *__mask, double _Complex __val);
void matsetpred_c(Matrix_c *__m, pred_fn_c __predicate, double _Complex __val);
 Vector_c*Matrix_filter_mask_c(const Matrix_c *__m, const Matrix_c *__mask);
_Bool Logical_all_c(const Matrix_c *__mask);
_Bool Logical_any_c(const Matrix_c *__mask);
Logical_c *Logical_not_c(const Matrix_c *__mask);
Matrix_c *Matrix_as_index_c(const Matrix_c *__m);
 Vector_c*Matrix_scrub_index_c(const Matrix_c *__m, const Index_c *__ind);
 Vector_c*matindex_c(const Matrix_c *__m, const Index_c *__ind);
 Vector_c*Matrix_index_c(const Matrix_c *__m, const Index_c *__ind);
 Vector_c*Matrix_logical_index_c(const Matrix_c *__m, const Logical_c *__log);
Index_c *Matrix_where_c(const Matrix_c *__m, pred_fn_c __fn);
static inline Index_c *Logical_get_index_c(const Logical_c *__log) {
    Index_c *ind = Vector_new_c(Vector_mask_count_c(__log));
    MatIter_c it = Matrix_begin_c(ind);
    for (size_t i = 0; i < Matrix_size_c(__log); i++) {
        if (matget_c(__log, i) == TRUE_c) {
            MatIter_set_c(it, i);
            it = MatIter_next_c(it);
        }
    }
    return ind;
}
Index_c *Matrix_where_lt_c(const Matrix_c *__m, double __k);
Index_c *Matrix_where_lteq_c(const Matrix_c *__m, double __k);
Index_c *Matrix_where_gt_c(const Matrix_c *__m, double __k);
Index_c *Matrix_where_gteq_c(const Matrix_c *__m, double __k);
Matrix_c *matsetind_c(Matrix_c *__m, const Matrix_c *__ind, const Matrix_c *__val);
Matrix_c *Matrix_set_index_c(const Matrix_c *__m, const Matrix_c *__ind, const Matrix_c *__val);
Matrix_c *Matrix_extract_rows_c(const Matrix_c *__m, Index_c *__ind);
Matrix_c *Matrix_extract_cols_c(const Matrix_c *__m, Index_c *__ind);
 Vector_c*Matrix_scrub_col_index_c(const Matrix_c *__m, const Index_c *__ind);
 Vector_c*Matrix_scrub_row_index_c(const Matrix_c *__m, const Index_c *__ind);
static inline _Bool is_int_c(double x) {
    return x == floor(x);
}
static inline _Bool are_col_indices_valid_c(const Matrix_c *__m, const Index_c *__ind) {
    MatIter_c it = Matrix_begin_c(__ind);
    const MatIter_c end = Matrix_begin_c(__ind);
    for(; !MatIter_cmp_c(it, end); it = MatIter_next_c(it)) {
        double val = MatIter_value_c(it);
        if (val < 0 || !is_int_c(val) || val >= __m->ncols) return 0;
    }
    return 1;
}
static inline _Bool are_row_indices_valid_c(const Matrix_c *__m, const Index_c *__ind) {
    MatIter_c it = Matrix_begin_c(__ind);
    const MatIter_c end = Matrix_begin_c(__ind);
    for(; !MatIter_cmp_c(it, end); it = MatIter_next_c(it)) {
        double val = MatIter_value_c(it);
        if (val < 0 || !is_int_c(val) || val >= __m->nrows) return 0;
    }
    return 1;
}
int MatIter_max_index_c(MatIter_c begin, const MatIter_c end);
int MatIter_min_index_c(MatIter_c begin, const MatIter_c end);
int Matrix_row_min_index_c(const Matrix_c *__m, size_t __i);
int Matrix_row_max_index_c(const Matrix_c *__m, size_t __i);
int Matrix_col_min_index_c(const Matrix_c *__m, size_t __i);
int Matrix_col_max_index_c(const Matrix_c *__m, size_t __i);
int Matrix_col_max_index_from_row_c(const Matrix_c *__m, size_t __j, size_t __i);
int Matrix_col_min_index_from_row_c(const Matrix_c *__m, size_t __j, size_t __i);
int Matrix_row_max_index_from_col_c(const Matrix_c *__m, size_t __i, size_t __j);
int Matrix_row_min_index_from_col_c(const Matrix_c *__m, size_t __i, size_t __j);
Matrix_c *Matrix_runif_c(size_t __m, size_t __n, double _Complex __a, double _Complex __b);
Matrix_c *Matrix_rnorm_c(size_t __m, size_t __n, double _Complex __mean, double _Complex __std);
Matrix_c *as_stochastic_c(Matrix_c *__m);
Matrix_c *as_row_stochastic_c(Matrix_c *__m);
Matrix_c *as_col_stochastic_c(Matrix_c *__m);
Matrix_c *as_doubly_stochastic_c(Matrix_c *__m);
Matrix_c *as_doubly_stochastic_DEPRECATED_c(Matrix_c *__m);
Matrix_c *Matrix_rexp_c(size_t __m, size_t __n, double __rate);
Matrix_c *Matrix_as_stochastic_c(const Matrix_c *__m);
Matrix_c *Stochastic_runif_c(size_t __n, double __a, double __b);
Matrix_c *Stochastic_rnorm_c(size_t __n, double __mean, double __std);
Matrix_c *Stochastic_rexp_c(size_t __n, double __rate);
 Vector_c*Vector_prob_unif_c(size_t __n);
 Vector_c*compute_row_sums_c(const Matrix_c *__m);
 Vector_c*compute_col_sums_c(const Matrix_c *__m);
