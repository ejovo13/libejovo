// Header file to include the necessary functions but most importantly to include a few standard matrices so I don't have to
// keep generating new ones for every test!!!
#pragma once

#include "ejovo_matrix_generic.h"
#include "ejovo_assert.h"
#include "ejovo_print.h"
#include <assert.h>
#include <stdbool.h>

Matrix_d *get_wide() {

    Matrix_d *wide = Matrix_from_d(
        (double[]) {0.000000, 3.000000, 5.000000, 9.000000, 2.000000, 2.000000, 3.000000, 6.000000, 9.000000, 10.000000, 6.000000, 1.000000, 5.000000, 8.000000, 0.000000, 2.000000, 10.000000, 8.000000, 10.000000, 5.000000, 6.000000, 3.000000, 2.000000, 0.000000, 0.000000, 6.000000, 4.000000, 2.000000, 7.000000, 10.000000, 2.000000, 10.000000, 3.000000, 7.000000, 7.000000, 6.000000, 10.000000, 9.000000, 3.000000, 4.000000, 0.000000, 9.000000, 4.000000, 9.000000, 2.000000, 7.000000, 5.000000, 7.000000, 6.000000, 9.000000}
        , 5, 10);

    return wide;

}

Matrix_d *get_tall() {

    Matrix_d *tall = Matrix_from_d(
        (double[]) {7.000000, 2.000000, 2.000000, 1.000000, 3.000000, 3.000000, 1.000000, 9.000000, 8.000000, 5.000000, 9.000000, 2.000000, 9.000000, 3.000000, 9.000000, 4.000000, 2.000000, 9.000000, 1.000000, 8.000000, 1.000000, 5.000000, 7.000000, 1.000000, 10.000000, 6.000000, 4.000000, 0.000000, 7.000000, 6.000000, 9.000000, 2.000000}
        , 8, 4);

    return tall;

}

Matrix_d *get_square() {

    Matrix_d *sq = Matrix_from_d(
        (double[]) {2.000000, 8.000000, 7.000000, 7.000000, 10.000000, 2.000000, 8.000000, 3.000000, 3.000000, 1.000000, 1.000000, 4.000000, 6.000000, 9.000000, 2.000000, 1.000000, 7.000000, 0.000000, 6.000000, 2.000000, 6.000000, 4.000000, 1.000000, 4.000000, 9.000000, 8.000000, 8.000000, 1.000000, 6.000000, 10.000000, 3.000000, 3.000000, 9.000000, 8.000000, 9.000000, 1.000000, 6.000000, 7.000000, 6.000000, 7.000000, 2.000000, 5.000000, 9.000000, 3.000000, 2.000000, 9.000000, 2.000000, 9.000000, 8.000000, 8.000000, 0.000000, 8.000000, 3.000000, 5.000000, 5.000000, 3.000000, 9.000000, 7.000000, 7.000000, 7.000000, 6.000000, 2.000000, 1.000000, 6.000000}
        , 8, 8);

    return sq;
}

Matrix_d *get_A() {

    Matrix_d *A = Matrix_from_d((double[]) {1, 2, 3, 4, 5, 6}, 2, 3);
    return A;

}

Matrix_d *get_B() {

    Matrix_d *B = Matrix_from_d((double[]) {10, 12, 14, 16, 18, 20}, 3, 2);
    return B;
}

 Vector_d*get_V() {

    Matrix_d *V = Matrix_from_d((double[]) {49.000000, 66.000000, 90.000000, 86.000000, 32.000000, 5.000000, 28.000000, 26.000000, 12.000000, 84.000000, 66.000000, 31.000000, 88.000000, 1.000000, 62.000000, 65.000000, 86.000000, 2.000000, 29.000000, 73.000000, 17.000000, 22.000000, 56.000000, 60.000000, 29.000000, 97.000000, 40.000000, 18.000000, 23.000000, 43.000000, 18.000000, 58.000000, 70.000000, 82.000000, 27.000000, 58.000000, 3.000000, 6.000000, 7.000000, 6.000000, 39.000000, 89.000000, 30.000000, 53.000000, 89.000000, 50.000000, 61.000000, 9.000000, 78.000000, 60.000000, 86.000000, 79.000000, 63.000000, 62.000000, 48.000000, 97.000000, 50.000000, 63.000000, 87.000000, 52.000000, 38.000000, 84.000000, 80.000000, 28.000000, 11.000000, 60.000000, 76.000000, 15.000000, 76.000000, 75.000000, 32.000000, 66.000000, 59.000000, 43.000000, 59.000000, 48.000000, 93.000000, 5.000000, 33.000000, 2.000000, 12.000000, 34.000000, 64.000000, 55.000000, 5.000000, 67.000000, 44.000000, 74.000000, 77.000000, 70.000000, 18.000000, 3.000000, 74.000000, 96.000000, 3.000000, 19.000000, 4.000000, 54.000000, 33.000000, 72.000000}, 1, 100);
    return V;

}